import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Con, Row, Col } from 'bee-layout';
import { Panel } from 'bee-panel';
import Drawer from 'bee-drawer';
import Clipboard from 'bee-clipboard'; 
import Button from '../src';



var Demo01 = require("./demolist/Demo01");var Demo02 = require("./demolist/Demo02");var Demo03 = require("./demolist/Demo03");var Demo04 = require("./demolist/Demo04");var Demo05 = require("./demolist/Demo05");var Demo11 = require("./demolist/Demo11");var Demo12 = require("./demolist/Demo12");var Demo21 = require("./demolist/Demo21");var Demo22 = require("./demolist/Demo22");var Demo32 = require("./demolist/Demo32");var Demo33 = require("./demolist/Demo33");var Demo35 = require("./demolist/Demo35");var Demo41 = require("./demolist/Demo41");var Demo51 = require("./demolist/Demo51");var Demo52 = require("./demolist/Demo52");var Demo53 = require("./demolist/Demo53");var Demo62 = require("./demolist/Demo62");var Demo63 = require("./demolist/Demo63");var Demo71 = require("./demolist/Demo71");var Demo81 = require("./demolist/Demo81");var Demo82 = require("./demolist/Demo82");var Demo83 = require("./demolist/Demo83");var Demo91 = require("./demolist/Demo91");var Demo92 = require("./demolist/Demo92");var Demo101 = require("./demolist/Demo101");var Demo102 = require("./demolist/Demo102");var Demo103 = require("./demolist/Demo103");var Demo104 = require("./demolist/Demo104");var Demo105 = require("./demolist/Demo105");var Demo106 = require("./demolist/Demo106");var Demo107 = require("./demolist/Demo107");var Demo121 = require("./demolist/Demo121");var Demo131 = require("./demolist/Demo131");var Demo132 = require("./demolist/Demo132");var Demo133 = require("./demolist/Demo133");var Demo134 = require("./demolist/Demo134");var Demo161 = require("./demolist/Demo161");var Demo162 = require("./demolist/Demo162");var Demo501 = require("./demolist/Demo501");var DemoArray = [{"example":<Demo01 />,"title":" 基本表格","code":"/**\r\n*\r\n* @title 基本表格\r\n* @parent 基础 Basic\r\n* @description 鼠标hover行时呼出操作按钮。单元格数据过长时，可结合Tooltip组件使用。\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n  {\r\n    title: \"员工编号\", dataIndex: \"a\", key: \"a\", width: 300, className: \"rowClassName\",\r\n    fixed:'left',\r\n    textAlign:'center',\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"80px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { title: \"员工姓名\", dataIndex: \"b\", key: \"b\", width: 500,textAlign:'center'},\r\n  { title: \"性别\", dataIndex: \"c\", key: \"c\", width: 500,textAlign:'center'},\r\n  { title: \"部门\", dataIndex: \"d\", key: \"d\", width: 200,textAlign:'center' }\r\n];\r\n\r\nconst data = [\r\n  { a: \"ASVAL_201903280005\", b: \"小张\", c: \"男\", d: \"财务二科\", key: \"1\" },\r\n  { a: \"ASVAL_201903200004\", b: \"小明\", c: \"男\", d: \"财务一科\", key: \"2\" },\r\n  { a: \"ASVAL_201903120002\", b: \"小红\", c: \"女\", d: \"财务一科\", key: \"3\" }\r\n];\r\n\r\nclass Demo01 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    console.log('这是第' , this.currentIndex , '行');\r\n    console.log('内容：' , this.currentRecord);\r\n  }\r\n\r\n  onRowHover=(index,record)=>{\r\n    this.currentIndex = index;\r\n    this.currentRecord = record;\r\n  }\r\n\r\n  getHoverContent=()=>{\r\n    return <div className=\"opt-btns\"><Button size=\"sm\" onClick={this.handleClick}>一些操作</Button> </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          parentNodeId='parent'\r\n          bordered = {true}\r\n          hoverContent={this.getHoverContent}\r\n          onRowHover={this.onRowHover}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 鼠标hover行时呼出操作按钮。单元格数据过长时，可结合Tooltip组件使用。"},{"example":<Demo02 />,"title":" 默认无数据展示","code":"/**\r\n*\r\n* @title 默认无数据展示\r\n* @parent 基础 Basic\r\n* @description 无数据时显示效果展示（可自定义）\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table, Icon } from 'tinper-bee';\r\n\n\r\nconst columns02 = [\r\n    {\r\n      title: \"员工编号\",\r\n      dataIndex: \"num\",\r\n      key: \"num\",\r\n      width: \"40%\"\r\n    },\r\n    {\r\n      title: \"员工姓名\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      width: \"30%\"\r\n    },\r\n    {\r\n      title: \"部门\",\r\n      dataIndex: \"department\",\r\n      key: \"department\"\r\n    }\r\n];\r\n  \r\nconst data02 = [];\r\n\r\nconst emptyFunc = () => <Icon type=\"uf-nodata\"></Icon>\r\n  \r\nclass Demo02 extends Component {\r\n  render() {\r\n    return <Table className=\"demo02\" columns={columns02} data={data02} emptyText={emptyFunc} />;\r\n  }\r\n}\r\n\r\n","desc":" 无数据时显示效果展示（可自定义）","scss_code":".demo02 {\r\n    .u-table-placeholder i{\r\n        font-size: 60px;\r\n        line-height: 60px;\r\n    }\r\n}"},{"example":<Demo03 />,"title":" 固定表头","code":"/**\r\n*\r\n* @title 固定表头\r\n* @parent 基础 Basic\r\n* @description 设置`scroll.y`指定滚动区域的高度，达到固定表头效果\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns03 = [\r\n  {\r\n      title: \"序号\",\r\n      dataIndex: \"index\",\r\n      key: \"index\",\r\n      width: 80, \r\n      render(text, record, index) {\r\n          return index + 1;\r\n      }\r\n  },\r\n  {\r\n      title: \"订单编号\",\r\n      dataIndex: \"orderCode\",\r\n      key: \"orderCode\",\r\n      width: 200, \r\n  },\r\n  {\r\n      title: \"供应商名称\",\r\n      dataIndex: \"supplierName\",\r\n      key: \"supplierName\",\r\n      width: 200\r\n  },\r\n  {\r\n      title: \"类型\",\r\n      dataIndex: \"type_name\",\r\n      key: \"type_name\",\r\n      width: 200\r\n  },\r\n  {\r\n      title: \"采购组织\",\r\n      dataIndex: \"purchasing\",\r\n      key: \"purchasing\",\r\n      width: 200\r\n  },\r\n  {\r\n      title: \"采购组\",\r\n      dataIndex: \"purchasingGroup\",\r\n      key: \"purchasingGroup\",\r\n      width: 200\r\n  },\r\n  {\r\n      title: \"凭证日期\",\r\n      dataIndex: \"voucherDate\",\r\n      key: \"voucherDate\",\r\n      width: 200,\r\n  },\r\n  {\r\n      title: \"审批状态\",\r\n      dataIndex: \"approvalState_name\",\r\n      key: \"approvalState_name\",\r\n      width: 200\r\n  },\r\n  {\r\n      title: \"确认状态\",\r\n      dataIndex: \"confirmState_name\",\r\n      key: \"confirmState_name\",\r\n       width: 200\r\n  }, \r\n  {\r\n      title: \"关闭状态\",\r\n      dataIndex: \"closeState_name\",\r\n      key: \"closeState_name\",\r\n      width: 100\r\n  }\r\n];\r\n\r\nconst data03 = [\r\n  { \r\n    orderCode:\"NU0391025\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"1\",\r\n    purchasing:'组织c', \r\n    purchasingGroup:\"aa\",\r\n    voucherDate:\"2018年03月18日\",\r\n    approvalState_name:\"已审批\",\r\n    confirmState_name:\"执行中\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"1\"\r\n  }, \r\n  { \r\n    orderCode:\"NU0391026\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"2\",\r\n    purchasing:'组织a', \r\n    purchasingGroup:\"bb\",\r\n    voucherDate:\"2018年02月05日\",\r\n    approvalState_name:\"已审批\",\r\n    confirmState_name:\"待确认\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"2\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391027\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"3\",\r\n    purchasing:'组织b', \r\n    purchasingGroup:\"aa\",\r\n    voucherDate:\"2018年07月01日\",\r\n    approvalState_name:\"已审批\",\r\n    confirmState_name:\"终止\",\r\n    closeState_name:\"已关闭\",\r\n    key: \"3\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391028\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"4\",\r\n    purchasing:'组织c', \r\n    purchasingGroup:\"cc\",\r\n    voucherDate:\"2019年03月01日\",\r\n    approvalState_name:\"未审批\",\r\n    confirmState_name:\"待确认\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"4\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391029\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"5\",\r\n    purchasing:'组织d', \r\n    purchasingGroup:\"ss\",\r\n    voucherDate:\"2019年02月14日\",\r\n    approvalState_name:\"未审批\",\r\n    confirmState_name:\"待确认\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"5\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391030\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"1\",\r\n    purchasing:'组织e', \r\n    purchasingGroup:\"zz\",\r\n    voucherDate:\"2019年02月18日\",\r\n    approvalState_name:\"已审批\",\r\n    confirmState_name:\"终止\",\r\n    closeState_name:\"已关闭\",\r\n    key: \"6\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391031\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"2\",\r\n    purchasing:'组织f', \r\n    purchasingGroup:\"qq\",\r\n    voucherDate:\"2019年01月01日\",\r\n    approvalState_name:\"已审批\",\r\n    confirmState_name:\"执行中\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"7\"\r\n  },\r\n  { \r\n    orderCode:\"NU0391032\", \r\n    supplierName: \"xx供应商\",\r\n    type_name: \"3\",\r\n    purchasing:'组织g', \r\n    purchasingGroup:\"pp\",\r\n    voucherDate:\"2019年01月31日\",\r\n    approvalState_name:\"未审批\",\r\n    confirmState_name:\"待确认\",\r\n    closeState_name:\"未关闭\",\r\n    key: \"8\"\r\n  },\r\n];\r\n\r\nclass Demo03 extends Component {\r\n  render() {\r\n    return <Table columns={columns03} data={data03} scroll={{y: 150 }} />;\r\n  }\r\n}\r\n\r\n","desc":" 设置`scroll.y`指定滚动区域的高度，达到固定表头效果"},{"example":<Demo04 />,"title":" 隔行换色","code":"/**\r\n*\r\n* @title 隔行换色\r\n* @parent 基础 Basic\r\n* @description 可自定义斑马线颜色\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns04 = [\r\n  {\r\n    title: \"员工姓名\",\r\n    width: 100,\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  { title: \"年龄\", width: 100, dataIndex: \"age\", key: \"age\"},\r\n  { title: \"住址\", dataIndex: \"address\", key: \"1\" }\r\n];\r\n\r\nconst data04 = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    address: \"New York Park\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"4\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },{\r\n    key: \"11\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    address: \"New York Park\"\r\n  },\r\n  {\r\n    key: \"12\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"13\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"14\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  }\r\n];\r\n\r\nclass Demo04 extends Component {\r\n  render() {\r\n    return <Table \r\n            className=\"demo04\" \r\n            columns={columns04} \r\n            data={data04} />\r\n  }\r\n}\r\n\r\n","desc":" 可自定义斑马线颜色","scss_code":".demo04 {\r\n    &.u-table tr:nth-child(2n){\r\n        background: #f7f9fb;\r\n    }\r\n    &.u-table tr.u-table-row-hover, .u-table tr:hover{\r\n        background: #ebecf0;\r\n    }\r\n}"},{"example":<Demo05 />,"title":" 表格 Loading 加载","code":"/**\r\n*\r\n* @title 表格 Loading 加载\r\n* @parent 基础 Basic\r\n* @description loading可以传boolean或者object对象，object为bee-loading组件的参数类型\r\n*\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Table } from 'tinper-bee';\r\nimport {Button,Tooltip} from \"tinper-bee\";\r\n\r\nconst columns05 = [\r\n  { title: \"员工编号\", dataIndex: \"a\", key: \"a\", width: 300, className: \"rowClassName\",fixed:'left'},\r\n  { title: \"员工姓名\", dataIndex: \"b\", key: \"b\", width: 500 },\r\n  { title: \"性别\", dataIndex: \"c\", key: \"c\", width: 500 },\r\n  { title: \"部门\", dataIndex: \"d\", key: \"d\", width: 200 }\r\n];\r\n\r\nconst data05 = [\r\n  { a: \"ASVAL_201903280005\", b: \"小张\", c: \"男\", d: \"财务二科\", key: \"1\" },\r\n  { a: \"ASVAL_201903200004\", b: \"小明\", c: \"男\", d: \"财务一科\", key: \"2\" },\r\n  { a: \"ASVAL_201903120002\", b: \"小红\", c: \"女\", d: \"财务一科\", key: \"3\" }\r\n];\r\n\r\nclass Demo05 extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      loading : true\r\n    }\r\n  }\r\n  changeLoading = () => {\r\n    this.setState({\r\n      loading : !this.state.loading\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"editable-add-btn\"\r\n          onClick={this.changeLoading}\r\n        >\r\n          切换loading\r\n        </Button>\r\n        <Table\r\n          columns={columns05}\r\n          data={data05}\r\n          // loading={this.state.loading}或者是boolean\r\n          loading={{show:this.state.loading}}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" loading可以传boolean或者object对象，object为bee-loading组件的参数类型"},{"example":<Demo11 />,"title":" 横向滚动条","code":"/**\r\n*\r\n* @title 横向滚动条\r\n* @parent 滚动 Scroll View\r\n* @description 设置`scroll`属性支持横向或纵向滚动，x/y的取值可以是正整数、百分比、布尔值\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n    {\r\n        title: \"序号\",\r\n        dataIndex: \"index\",\r\n        key: \"index\",\r\n        width: 100, \r\n        render(text, record, index) {\r\n            return index + 1;\r\n        }\r\n    },\r\n    {\r\n        title: \"订单编号\",\r\n        dataIndex: \"orderCode\",\r\n        key: \"orderCode\",\r\n        width: 300, \r\n    },\r\n    {\r\n        title: \"供应商名称\",\r\n        dataIndex: \"supplierName\",\r\n        key: \"supplierName\",\r\n        width: 200\r\n    },\r\n    {\r\n        title: \"类型\",\r\n        dataIndex: \"type_name\",\r\n        key: \"type_name\",\r\n        width: 200\r\n    },\r\n    {\r\n        title: \"采购组织\",\r\n        dataIndex: \"purchasing\",\r\n        key: \"purchasing\",\r\n        width: 200\r\n    },\r\n    {\r\n        title: \"采购组\",\r\n        dataIndex: \"purchasingGroup\",\r\n        key: \"purchasingGroup\",\r\n        width: 200\r\n    },\r\n    {\r\n        title: \"凭证日期\",\r\n        dataIndex: \"voucherDate\",\r\n        key: \"voucherDate\",\r\n        width: 300,\r\n    },\r\n    {\r\n        title: \"审批状态\",\r\n        dataIndex: \"approvalState_name\",\r\n        key: \"approvalState_name\",\r\n        width: 200\r\n    },\r\n    {\r\n        title: \"确认状态\",\r\n        dataIndex: \"confirmState_name\",\r\n        key: \"confirmState_name\",\r\n         width: 200\r\n    }, \r\n    {\r\n        title: \"关闭状态\",\r\n        dataIndex: \"closeState_name\",\r\n        key: \"closeState_name\",\r\n        width: 100\r\n    }\r\n];\r\n  \r\nconst data = [\r\n    { \r\n      orderCode:\"NU0391025\", \r\n      supplierName: \"xx供应商\",\r\n      type_name: \"1\",\r\n      purchasing:'组织c', \r\n      purchasingGroup:\"aa\",\r\n      voucherDate:\"2018年03月18日\",\r\n      approvalState_name:\"已审批\",\r\n      confirmState_name:\"执行中\",\r\n      closeState_name:\"未关闭\",\r\n      key: \"1\"\r\n    }, \r\n    { \r\n      orderCode:\"NU0391026\", \r\n      supplierName: \"xx供应商\",\r\n      type_name: \"2\",\r\n      purchasing:'组织a', \r\n      purchasingGroup:\"bb\",\r\n      voucherDate:\"2018年02月05日\",\r\n      approvalState_name:\"已审批\",\r\n      confirmState_name:\"待确认\",\r\n      closeState_name:\"未关闭\",\r\n      key: \"2\"\r\n    },\r\n    { \r\n      orderCode:\"NU0391027\", \r\n      supplierName: \"xx供应商\",\r\n      type_name: \"3\",\r\n      purchasing:'组织b', \r\n      purchasingGroup:\"aa\",\r\n      voucherDate:\"2018年07月01日\",\r\n      approvalState_name:\"已审批\",\r\n      confirmState_name:\"终止\",\r\n      closeState_name:\"已关闭\",\r\n      key: \"3\"\r\n    },\r\n    { \r\n      orderCode:\"NU0391028\", \r\n      supplierName: \"xx供应商\",\r\n      type_name: \"4\",\r\n      purchasing:'组织c', \r\n      purchasingGroup:\"cc\",\r\n      voucherDate:\"2019年03月01日\",\r\n      approvalState_name:\"未审批\",\r\n      confirmState_name:\"待确认\",\r\n      closeState_name:\"未关闭\",\r\n      key: \"4\"\r\n    },\r\n    { \r\n      orderCode:\"NU0391029\", \r\n      supplierName: \"xx供应商\",\r\n      type_name: \"5\",\r\n      purchasing:'组织d', \r\n      purchasingGroup:\"ss\",\r\n      voucherDate:\"2019年02月14日\",\r\n      approvalState_name:\"未审批\",\r\n      confirmState_name:\"待确认\",\r\n      closeState_name:\"未关闭\",\r\n      key: \"5\"\r\n    }\r\n];\r\n\r\nclass Demo11 extends Component {\r\n  render() {\r\n    return (\r\n        <Table columns={columns} data={data} scroll={{ x:true }} />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 设置`scroll`属性支持横向或纵向滚动，x/y的取值可以是正整数、百分比、布尔值"},{"example":<Demo12 />,"title":" 纵向滚动条","code":"/**\r\n*\r\n* @title 纵向滚动条\r\n* @parent 滚动 Scroll View\r\n* @description 设置`scroll`属性支持横向或纵向滚动，x/y的取值可以是正整数、百分比、布尔值\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns12 = [\r\n    {\r\n      title: \"Full Name\",\r\n      width: 100,\r\n      dataIndex: \"name\",\r\n      key: \"name\"\r\n    },\r\n    { title: \"Age\", width: 100, dataIndex: \"age\", key: \"age\"},\r\n    { title: \"Address\", dataIndex: \"address\", key: \"1\" }\r\n];\r\n\r\nconst data12 = [\r\n    {\r\n        key: \"1\",\r\n        name: \"John Brown\",\r\n        age: 32,\r\n        address: \"New York Park\"\r\n    },\r\n    {\r\n        key: \"2\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    },\r\n    {\r\n        key: \"3\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    },\r\n    {\r\n        key: \"4\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    },{\r\n        key: \"11\",\r\n        name: \"John Brown\",\r\n        age: 32,\r\n        address: \"New York Park\"\r\n    },\r\n    {\r\n        key: \"12\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    },\r\n    {\r\n        key: \"13\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    },\r\n    {\r\n        key: \"14\",\r\n        name: \"Jim Green\",\r\n        age: 40,\r\n        address: \"London Park\"\r\n    }\r\n];\r\nclass Demo12 extends Component {\r\n  render() {\r\n    return (\r\n        <Table bordered columns={columns12} data={data12} scroll={{y:150 }} />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 设置`scroll`属性支持横向或纵向滚动，x/y的取值可以是正整数、百分比、布尔值"},{"example":<Demo21 />,"title":" 渲染本地数据","code":"/**\r\n*\r\n* @title 渲染本地数据\r\n* @parent 数据操作 Data Opetation\r\n* @description 可自定义页头和页脚。\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n  {\r\n    title: \"员工编号\", dataIndex: \"a\", key: \"a\", width: 300, className: \"rowClassName\",\r\n    fixed:'left',\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"80px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { title: \"员工姓名\", dataIndex: \"b\", key: \"b\", width: 500 },\r\n  { title: \"性别\", dataIndex: \"c\", key: \"c\", width: 500 },\r\n  { title: \"部门\", dataIndex: \"d\", key: \"d\", width: 200 }\r\n];\r\n\r\nconst data = [\r\n  { a: \"ASVAL_201903280005\", b: \"小张\", c: \"男\", d: \"财务二科\", key: \"1\" },\r\n  { a: \"ASVAL_201903200004\", b: \"小明\", c: \"男\", d: \"财务一科\", key: \"2\" },\r\n  { a: \"ASVAL_201903120002\", b: \"小红\", c: \"女\", d: \"财务一科\", key: \"3\" }\r\n];\r\nclass Demo21 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          title={currentData => <div>员工信息统计表</div>}\r\n          footer={currentData => <div>合计: 共{data.length}条数据</div>}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 可自定义页头和页脚。"},{"example":<Demo22 />,"title":" 渲染远程数据","code":"/**\r\n*\r\n* @title 渲染远程数据\r\n* @parent 数据操作 Data Opetation\r\n* @description 可通过 ajax 请求方式，从服务端读取并展现数据。也可自行接入其他数据处理方式。\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button} from \"tinper-bee\";\r\nimport reqwest from 'reqwest';\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [{\r\n  title: 'Name',\r\n  dataIndex: 'name',\r\n  sorter: true,\r\n  render: name => `${name.first} ${name.last}`,\r\n  width: '20%',\r\n}, {\r\n  title: 'Gender',\r\n  dataIndex: 'gender',\r\n  filters: [\r\n      { text: 'Male', value: 'male' },\r\n      { text: 'Female', value: 'female' },\r\n  ],\r\n  width: '20%',\r\n}, {\r\n  title: 'Email',\r\n  dataIndex: 'email',\r\n}];\r\n\r\nclass Demo22 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  fetch = (params = {}) => {\r\n    console.log('params:', params);\r\n    this.setState({ loading: true });\r\n    reqwest({\r\n      url: 'https://randomuser.me/api',\r\n      method: 'get',\r\n      data: {\r\n        results: 10,\r\n        ...params,\r\n      },\r\n      type: 'json',\r\n    }).then((data) => {\r\n      this.setState({\r\n        loading: false,\r\n        data: data.results,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"demo22\">\r\n        <Button className=\"opt-btns\" colors=\"primary\" onClick={() => this.fetch()}>点击加载远程数据</Button>\r\n        <Table\r\n          columns={columns}\r\n          data={this.state.data}\r\n          loading={this.state.loading}\r\n          scroll={{y:200}}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 可通过 ajax 请求方式，从服务端读取并展现数据。也可自行接入其他数据处理方式。","scss_code":".demo22{\r\n    .opt-btns{\r\n        margin-bottom: 8px;\r\n    }\r\n}"},{"example":<Demo32 />,"title":" 多列表头","code":"/**\r\n *\r\n * @title 多列表头\r\n * @parent 列渲染 Custom Render\r\n * @description columns[n] 可以内嵌 children，以渲染分组表头。\r\n * 自定义表头高度需要传headerHeight，注：修改th的padding top和bottom置为0，否则会有影响\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Table } from 'tinper-bee';\r\nimport {Button} from \"tinper-bee\";\r\n\r\nconst { ColumnGroup, Column } = Table;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: 100,\r\n    fixed: \"left\"\r\n  },\r\n  {\r\n    title: \"Other\",\r\n    width:600,\r\n    children: [\r\n      {\r\n        title: \"Age\",\r\n        dataIndex: \"age\",\r\n        key: \"age\",\r\n        width: 200\r\n      },\r\n      {\r\n        title: \"Address\",\r\n        children: [\r\n          {\r\n            title: \"Street\",\r\n            dataIndex: \"street\",\r\n            key: \"street\",\r\n            width: 200\r\n          },\r\n          {\r\n            title: \"Block\",\r\n            children: [\r\n              {\r\n                title: \"Building\",\r\n                dataIndex: \"building\",\r\n                key: \"building\",\r\n                width: 100\r\n              },\r\n              {\r\n                title: \"Door No.\",\r\n                dataIndex: \"number\",\r\n                key: \"number\",\r\n                width: 100\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    width:400,\r\n    children: [\r\n      {\r\n        title: \"Company Address\",\r\n        dataIndex: \"companyAddress\",\r\n        key: \"companyAddress\",\r\n        width:200,\r\n      },\r\n      {\r\n        title: \"Company Name\",\r\n        dataIndex: \"companyName\",\r\n        key: \"companyName\",\r\n        width:200,\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: \"Gender\",\r\n    dataIndex: \"gender\",\r\n    key: \"gender\",\r\n    width: 60,\r\n    fixed: \"right\"\r\n  }\r\n];\r\n\r\nconst data = [];\r\nfor (let i = 0; i < 20; i++) {\r\n  data.push({\r\n    key: i,\r\n    name: \"John Brown\",\r\n    age: i + 1,\r\n    street: \"Lake Park\",\r\n    building: \"C\",\r\n    number: 2035,\r\n    companyAddress: \"Lake Street 42\",\r\n    companyName: \"SoftLake Co\",\r\n    gender: \"M\"\r\n  });\r\n}\r\n\r\nclass Demo32 extends Component {\r\n  render() {\r\n    return (\r\n      <Table\r\n        className={'demo32'}\r\n        columns={columns}\r\n        data={data}\r\n        headerHeight={40} //自定义表头高度\r\n        bordered\r\n        scroll={{ y: 240 }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" columns[n] 可以内嵌 children，以渲染分组表头。","scss_code":".demo32{\r\n    .u-table-thead th {\r\n        padding-top: 0px;\r\n        padding-bottom: 0px;\r\n    }\r\n}"},{"example":<Demo33 />,"title":" 数据关联","code":"/**\r\n*\r\n* @title 数据关联\r\n* @parent 列渲染 Custom Render\r\n* @description 数据行关联自定义菜单显示\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport {Icon,Checkbox,Dropdown,Menu} from 'tinper-bee';\r\nimport { Table } from 'tinper-bee';\r\nimport multiSelect from \"tinper-bee/lib/multiSelect\";;\r\nimport sort from \"tinper-bee/lib/sort\";;\r\n\r\nconst { Item } = Menu;\r\n\r\nconst data = [\r\n  { \r\n    num:\"NU0391025\", \r\n    name: \"aa\",\r\n    sex: \"男\",\r\n    dept:'财务二科', \r\n    rank:\"T1\",\r\n    year:\"1\",\r\n    seniority:\"1\",\r\n    key: \"1\"\r\n  }, \r\n  { \r\n    num:\"NU0391026\", \r\n    name: \"bb\",\r\n    sex: \"女\",\r\n    dept:'财务一科', \r\n    rank:\"M1\",\r\n    year:\"1\",\r\n    seniority:\"1\",\r\n    key: \"2\"\r\n  },\r\n  { \r\n    num:\"NU0391027\", \r\n    name: \"dd\",\r\n    sex: \"女\",\r\n    dept:'财务一科', \r\n    rank:\"T2\",\r\n    year:\"2\",\r\n    seniority:\"2\",\r\n    key: \"3\"\r\n  }\r\n];\r\n\r\nconst MultiSelectTable = multiSelect(Table, Checkbox);\r\nconst ComplexTable = sort(MultiSelectTable, Icon);\r\n\r\nclass Demo33 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    getSelectedDataFunc = data => {\r\n        console.log(data);\r\n    }\r\n    onSelect = (item) => {\r\n        console.log(item);\r\n    }\r\n    render() {\r\n        const menu1 = (\r\n            <Menu\r\n                onSelect={this.onSelect}>\r\n                <Item key=\"1\">模态弹出</Item>\r\n                <Item key=\"2\">链接跳转</Item>\r\n                <Item key=\"3\">打开新页</Item>\r\n            </Menu>);\r\n        let columns = [\r\n            {   title: \"关联\",dataIndex: \"link\",key: \"link\",width: 80, \r\n                render: (text, record, index) => {\r\n                    return (\r\n                        <Dropdown\r\n                            trigger={['click']}\r\n                            overlay={menu1}\r\n                            animation=\"slide-up\"\r\n                        >\r\n                            <Icon type=\"uf-link\" style={{color:'rgb(0, 72, 152)'}}></Icon>\r\n                        </Dropdown>\r\n                    )\r\n                }\r\n            },\r\n            { title: \"员工编号\",dataIndex: \"num\",key: \"num\",width: 200 },\r\n            { title: \"员工姓名\",dataIndex: \"name\",key: \"name\", width: 200},\r\n            { title: \"员工性别\",dataIndex: \"sex\",key: \"sex\",width: 200 },\r\n            { title: \"部门\",dataIndex: \"dept\",key: \"dept\",width: 200},\r\n            { title: \"职级\",dataIndex: \"rank\",key: \"rank\",width: 200},\r\n            { title: \"工龄\",dataIndex: \"year\",key: \"year\",width: 200},\r\n            { title: \"司龄\",dataIndex: \"seniority\",key: \"seniority\",width: 200}\r\n        ];\r\n        return <ComplexTable \r\n                bordered\r\n                columns={columns} \r\n                data={data} \r\n                multiSelect={{type: \"checkbox\"}}\r\n                getSelectedDataFunc={this.getSelectedDataFunc}\r\n                />\r\n    }\r\n}\r\n\r\n","desc":" 数据行关联自定义菜单显示"},{"example":<Demo35 />,"title":" 合并列后合计","code":"/**\r\n *\r\n * @title 合并列后合计\r\n * @parent 列渲染 Custom Render\r\n * @description 合并标题后的合计,且支持多字段统计（通过使用的封装好的功能方法实现复杂功能，简单易用！）\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee'; \r\nimport sum from \"tinper-bee/lib/sum.js\";;\r\n \r\nlet ComplexTable = sum(Table);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: 120,\r\n    fixed: \"left\"\r\n  },\r\n  {\r\n    title: \"Other\",\r\n    children: [\r\n      {\r\n        title: \"Age\",\r\n        dataIndex: \"age\",\r\n        key: \"age\",\r\n        width: 200,\r\n        sumCol: true,\r\n      },\r\n      {\r\n        title: \"Address\",\r\n        children: [\r\n          {\r\n            title: \"Street\",\r\n            dataIndex: \"street\",\r\n            key: \"street\",\r\n            width: 200\r\n          },\r\n          {\r\n            title: \"Block\",\r\n            children: [\r\n              {\r\n                title: \"Building\",\r\n                dataIndex: \"building\",\r\n                key: \"building\",\r\n                width: 100\r\n              },\r\n              {\r\n                title: \"Door No.\",\r\n                dataIndex: \"number\",\r\n                key: \"number\",\r\n                // width: 100,\r\n                sumCol: true,\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  // {\r\n  //   title: \"Company\",\r\n  //   children: [\r\n  //     {\r\n  //       title: \"Company Address\",\r\n  //       dataIndex: \"companyAddress\",\r\n  //       key: \"companyAddress\",\r\n  //       width: 100,\r\n  //     },\r\n  //     {\r\n  //       title: \"Company Name\",\r\n  //       dataIndex: \"companyName\",\r\n  //       key: \"companyName\",\r\n  //       width: 100,\r\n  //     }\r\n  //   ]\r\n  // },\r\n  {\r\n    title: \"Gender\",\r\n    dataIndex: \"gender\",\r\n    key: \"gender\",\r\n    width: 80,\r\n    fixed: \"right\"\r\n  }\r\n];\r\n\r\nfunction getData(){\r\n  const data = [];\r\n  for (let i = 0; i < 5; i++) {\r\n    data.push({\r\n      key: i,\r\n      name: \"John Brown\"+i,\r\n      age: i + Math.floor(Math.random()*10),\r\n      street: \"Lake Park\",\r\n      building: \"C\",\r\n      number: 20 *  Math.floor(Math.random()*10),\r\n      companyAddress: \"Lake Street 42\",\r\n      companyName: \"SoftLake Co\",\r\n      gender: \"M\"\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nclass Demo35 extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: getData()\r\n    };\r\n  }\r\n\r\n  changeData = ()=>{\r\n    this.setState({\r\n      data: getData()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state;\r\n    return (\r\n      <div>\r\n        <Button \r\n          className=\"editable-add-btn\"\r\n          onClick={this.changeData}\r\n        >\r\n          动态设置数据源\r\n        </Button>\r\n\r\n         <ComplexTable \r\n          columns={columns}\r\n          data={data}\r\n          bordered\r\n          // scroll={{ x: \"130%\", y: 140 }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","desc":" 合并标题后的合计,且支持多字段统计（通过使用的封装好的功能方法实现复杂功能，简单易用！）"},{"example":<Demo41 />,"title":" 编辑态表格","code":"/**\r\n*\r\n* @title 编辑态表格\r\n* @parent 编辑 Editor\r\n* @description 这是带有多种不同格式的编辑态表格（编辑态是通过使用不同的render来达到不同编辑格式）\r\n*\r\n*/\r\n\r\nimport React from \"react\";\r\nimport {Animate,Tooltip,FormControl,Button,Form,Icon,Checkbox,Select} from \"tinper-bee\";\r\nimport { Table, Datepicker } from 'tinper-bee';\r\n\nimport renderInput from \"tinper-bee/lib/InputRender.js\";;\r\nimport renderDate from \"tinper-bee/lib/DateRender.js\";;\r\nimport renderSelect from \"tinper-bee/lib/SelectRender.js\";;\r\n\r\nconst InputRender = renderInput(Form, FormControl, Icon);\r\nconst DateRender = renderDate(Datepicker, Icon);\r\nconst SelectRender = renderSelect(Select, Icon);\r\n\r\nconst format = \"YYYY-MM-DD\";\r\nconst format2 = \"YYYY-MM\";\r\nconst format3 = \"YYYY-MM-DD HH:mm:ss\";\r\n\r\nconst dateInputPlaceholder = \"选择日期\";\r\nconst dateInputPlaceholder2 = \"选择年月\";\r\nconst dataSource = [\r\n  {\r\n    key: \"boyuzhou\",\r\n    value: \"jack\"\r\n  },\r\n  {\r\n    key: \"renhualiu\",\r\n    value: \"lucy\"\r\n  },\r\n  {\r\n    key: \"yuzhao\",\r\n    value: \"yiminghe\"\r\n  }\r\n];\r\nclass Demo41 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataSource: [\r\n        {\r\n          key: \"0\",\r\n          name: \"沉鱼\",\r\n          number: \"10\",\r\n          age: \"y\",\r\n          address: \"jack\",\r\n          datepicker: \"2017-06-12\",\r\n          MonthPicker: \"2017-02\"\r\n        },\r\n        {\r\n          key: \"1\",\r\n          name: \"落雁\",\r\n          number: \"100\",\r\n          age: \"y\",\r\n          address: \"lucy\",\r\n          datepicker: \"2017-06-12\",\r\n          MonthPicker: \"2017-02\"\r\n        },\r\n        {\r\n          key: \"2\",\r\n          name: \"闭月\",\r\n          number: \"1000\",\r\n          age: \"n\",\r\n          address: \"lucy\",\r\n          datepicker: \"2017-06-12\",\r\n          MonthPicker: \"2017-02\"\r\n        },\r\n        {\r\n          key: \"3\",\r\n          name: \"羞花\",\r\n          number: \"9999\",\r\n          age: \"y\",\r\n          address: \"lucy\",\r\n          datepicker: \"2017-06-12\",\r\n          MonthPicker: \"2017-02\"\r\n        }\r\n      ],\r\n      count: 4\r\n    };\r\n    this.columns = [\r\n      {\r\n        title: \"普通输入\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        width: \"150px\",\r\n        render: (text, record, index) => (\r\n          <InputRender\r\n            name=\"name\"\r\n            placeholder=\"请输入姓名\"\r\n            value={text}\r\n            isclickTrigger={true}\r\n            check={this.check}\r\n            onChange={this.onInputChange(index, \"name\")}\r\n            isRequire={true}\r\n            method=\"blur\"\r\n            errorMessage={\r\n              <Tooltip overlay={\"错误提示\"}>\r\n                <Icon type=\"uf-exc-c\" className=\"\" />\r\n              </Tooltip>\r\n            }\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: \"货币输入\",\r\n        dataIndex: \"number\",\r\n        key: \"number\",\r\n        width: \"150px\",\r\n        render: (text, record, index) => (\r\n          <InputRender\r\n            format=\"Currency\"\r\n            name=\"number\"\r\n            placeholder=\"请输入货币\"\r\n            value={text}\r\n            isclickTrigger={true}\r\n            check={this.check}\r\n            onChange={this.onInputChange(index, \"number\")}\r\n            isRequire={true}\r\n            method=\"blur\"\r\n            errorMessage={\r\n              <Tooltip overlay={\"错误提示\"}>\r\n                <Icon type=\"uf-exc-c\" className=\"\" />\r\n              </Tooltip>\r\n            }\r\n            reg={/^[0-9]+$/}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: \"复选\",\r\n        dataIndex: \"age\",\r\n        key: \"age\",\r\n        width: \"100px\",\r\n        render: (text, record, index) => (\r\n          <Checkbox\r\n            checked={record.age}\r\n            onChange={this.onCheckChange(index, \"age\")}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: \"下拉框\",\r\n        dataIndex: \"address\",\r\n        key: \"address\",\r\n        width: \"200px\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <SelectRender\r\n              dataSource={dataSource}\r\n              isclickTrigger={true}\r\n              value={text}\r\n              onChange={this.onSelectChange(index, \"address\")}\r\n              size=\"sm\"\r\n            >\r\n              <Option value=\"jack\">boyuzhou</Option>\r\n              <Option value=\"lucy\">renhualiu</Option>\r\n              <Option value=\"disabled\" disabled>\r\n                Disabled\r\n              </Option>\r\n              <Option value=\"yiminghe\">yuzhao</Option>\r\n            </SelectRender>\r\n          );\r\n        }\r\n      },\r\n      {\r\n        title: \"年月日\",\r\n        dataIndex: \"datepicker\",\r\n        key: \"datepicker\",\r\n        width: \"200px\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <DateRender\r\n              value={text}\r\n              isclickTrigger={true}\r\n              format={format}\r\n              onSelect={this.onDateSelect}\r\n              onChange={this.onDateChange}\r\n              placeholder={dateInputPlaceholder}\r\n            />\r\n          );\r\n        }\r\n      },\r\n      {\r\n        title: \"年月\",\r\n        dataIndex: \"MonthPicker\",\r\n        key: \"MonthPicker\",\r\n        width: \"200px\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <DateRender\r\n              value={text}\r\n              type=\"MonthPicker\"\r\n              isclickTrigger={true}\r\n              format={format2}\r\n              onSelect={this.onSelect}\r\n              onChange={this.onChange}\r\n              placeholder={dateInputPlaceholder2}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    ];\r\n  }\r\n  check = (flag, obj) => {\r\n    console.log(flag);\r\n    console.log(obj);\r\n  };\r\n\r\n  onInputChange = (index, key) => {\r\n    return value => {\r\n      const dataSource = [...this.state.dataSource];\r\n      dataSource[index][key] = value;\r\n      this.setState({ dataSource });\r\n    };\r\n  };\r\n  onCheckChange = (index, key) => {\r\n    return value => {\r\n      const dataSource = [...this.state.dataSource];\r\n      dataSource[index][key] = value;\r\n      this.setState({ dataSource });\r\n    };\r\n  };\r\n  onSelectChange = (index, key) => {\r\n    return value => {\r\n      console.log(`selected ${value}`);\r\n      const dataSource = [...this.state.dataSource];\r\n      dataSource[index][key] = value;\r\n      this.setState({ dataSource });\r\n    };\r\n  };\r\n  onDateChange = d => {\r\n    console.log(d);\r\n  };\r\n  onDateSelect = d => {\r\n    console.log(d);\r\n  };\r\n  onDelete = index => {\r\n    return () => {\r\n      const dataSource = [...this.state.dataSource];\r\n      dataSource.splice(index, 1);\r\n      this.setState({ dataSource });\r\n    };\r\n  };\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      name: `凤姐 ${count}`,\r\n      age: 32,\r\n      address: \"jack\",\r\n      datepicker: \"2017-06-12\",\r\n      MonthPicker: \"2017-02\"\r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1\r\n    });\r\n  };\r\n\r\n  getBodyWrapper = body => {\r\n    return (\r\n      <Animate\r\n        transitionName=\"move\"\r\n        component=\"tbody\"\r\n        className={body.props.className}\r\n      >\r\n        {body.props.children}\r\n      </Animate>\r\n    );\r\n  };\r\n  getData = () => {\r\n    console.log(this.state.dataSource);\r\n  };\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const columns = this.columns;\r\n    return (\r\n      <div>\r\n        <Button\r\n          className=\"editable-add-btn\"\r\n          onClick={this.handleAdd}\r\n        >\r\n          添加一行\r\n        </Button>\r\n        <Button\r\n          style={{marginLeft:\"5px\"}}\r\n          className=\"editable-add-btn\"\r\n          onClick={this.getData}\r\n        >\r\n          获取数据\r\n        </Button>\r\n        <Table\r\n          data={dataSource}\r\n          columns={columns}\r\n          getBodyWrapper={this.getBodyWrapper}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 这是带有多种不同格式的编辑态表格（编辑态是通过使用不同的render来达到不同编辑格式）"},{"example":<Demo51 />,"title":" 左侧固定列","code":"/**\r\n*\r\n* @title 左侧固定列\r\n* @parent 列操作-锁定 Fixed\r\n* @description 固定列到表格的左侧\r\n*\r\n*/\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table } from 'tinper-bee';\r\n\r\n\r\n\r\nconst columns5 = [\r\n  {\r\n    title: \"Full Name\",\r\n    width: 100,\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    fixed: \"left\"\r\n  },\r\n  { title: \"Age\", width: 100, dataIndex: \"age\", key: \"age\", fixed: \"left\" },\r\n  { title: \"address\", dataIndex: \"address\", key: \"address\" }\r\n];\r\n\r\nconst data5 = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    address: \"New York Park\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  },\r\n  {\r\n    key: \"4\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    address: \"London Park\"\r\n  }\r\n];\r\n\r\nclass Demo51 extends Component {\r\n  render() {\r\n    return <Table columns={columns5} data={data5} scroll={{ x: \"110%\", y: 240 }}  />;\r\n  }\r\n}\r\n\r\n","desc":" 固定列到表格的左侧"},{"example":<Demo52 />,"title":" 右侧固定列","code":"/**\r\n*\r\n* @title 右侧固定列\r\n* @parent 列操作-锁定 Fixed\r\n* @description 固定列到表格的右侧\r\n*\r\n*/\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {Popconfirm} from 'tinper-bee';\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns5 = [\r\n    {\r\n        title: \"序号\",\r\n        dataIndex: \"index\",\r\n        key: \"index\",\r\n        width: 100, \r\n    },\r\n    {\r\n        title: \"订单编号\",\r\n        dataIndex: \"orderCode\",\r\n        key: \"orderCode\",\r\n        width: 100, \r\n    },\r\n    {\r\n        title: \"供应商名称\",\r\n        dataIndex: \"supplierName\",\r\n        key: \"supplierName\",\r\n        width: 100\r\n    },\r\n    {\r\n        title: \"类型\",\r\n        dataIndex: \"type_name\",\r\n        key: \"type_name\",\r\n        width: 100\r\n    },\r\n    {\r\n        title: \"采购组织\",\r\n        dataIndex: \"purchasing\",\r\n        key: \"purchasing\",\r\n        width: 100\r\n    },\r\n    {\r\n        title: \"采购组\",\r\n        dataIndex: \"purchasingGroup\",\r\n        key: \"purchasingGroup\",\r\n         width: 300\r\n    },\r\n    {\r\n        title: \"凭证日期\",\r\n        dataIndex: \"voucherDate\",\r\n        key: \"voucherDate\",\r\n        width: 100,\r\n        \r\n    },\r\n    {\r\n        title: \"审批状态\",\r\n        dataIndex: \"approvalState_name\",\r\n        key: \"approvalState_name\",\r\n        width: 100\r\n    },\r\n    {\r\n        title: \"确认状态\",\r\n        dataIndex: \"confirmState_name\",\r\n        key: \"confirmState_name\",\r\n         width: 100\r\n    }, \r\n    {\r\n        title: \"关闭状态\",\r\n        dataIndex: \"closeState_name\",\r\n        key: \"closeState_name\",\r\n        width: 100\r\n    },\r\n    {\r\n        title: \"操作\",\r\n        dataIndex: \"d\",\r\n        key: \"d\",\r\n        width:100,\r\n        fixed: \"right\",\r\n        render(text, record, index) {\r\n            return (\r\n                <div className='operation-btn'>\r\n                  <Popconfirm trigger=\"click\" placement=\"right\" content={'这是第' + index + '行，内容为:' + text}>\r\n                      <a href=\"javascript:;\" tooltip={text} >\r\n                      一些操作\r\n                      </a>\r\n                  </Popconfirm>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n];\r\n\r\nconst data5 = [\r\n    { \r\n        index: 1, \r\n        orderCode:\"2343\", \r\n        supplierName: \"xxx\",\r\n        type_name: \"123\",\r\n        purchasing:'内行', \r\n        purchasingGroup:\"323\",\r\n        voucherDate:\"kkkk\",\r\n        approvalState_name:\"vvvv\",\r\n        confirmState_name:\"aaaa\",\r\n        closeState_name:\"vnnnnn\",\r\n        d:\"操作\",\r\n        key: \"1\"\r\n    }, \r\n    { \r\n      index: 2, \r\n      _checked:true,\r\n      orderCode:\"222\", \r\n      supplierName: \"22xxx\",\r\n      type_name: \"1223\",\r\n      purchasing:'内行2', \r\n      purchasingGroup:\"3223\",\r\n      voucherDate:\"222kk\",\r\n      approvalState_name:\"22vvvv\",\r\n      confirmState_name:\"2aaaa\",\r\n      closeState_name:\"2vnnnnn\",\r\n      d:\"2操作\",\r\n      key: \"2\"\r\n    },\r\n    { \r\n      index: 3, \r\n      orderCode:\"222\", \r\n      supplierName: \"22xxx\",\r\n      _disabled:true,\r\n      type_name: \"1223\",\r\n      purchasing:'内行2', \r\n      purchasingGroup:\"3223\",\r\n      voucherDate:\"222kk\",\r\n      approvalState_name:\"22vvvv\",\r\n      confirmState_name:\"2aaaa\",\r\n      closeState_name:\"2vnnnnn\",\r\n      d:\"3操作\",\r\n      key: \"3\"\r\n    },\r\n    { \r\n      index: 4, \r\n      orderCode:\"222\", \r\n      supplierName: \"22xxx\",\r\n      type_name: \"1223\",\r\n      purchasing:'内行2', \r\n      purchasingGroup:\"3223\",\r\n      voucherDate:\"222kk\",\r\n      approvalState_name:\"22vvvv\",\r\n      confirmState_name:\"2aaaa\",\r\n      closeState_name:\"2vnnnnn\",\r\n      d:\"4操作\",\r\n      key: \"4\"\r\n    },\r\n];\r\n\r\nclass Demo52 extends Component {\r\n  render() {\r\n    return <Table columns={columns5} data={data5} scroll={{ x:true, y: 200 }}  />;\r\n  }\r\n}\r\n\r\n","desc":" 固定列到表格的右侧"},{"example":<Demo53 />,"title":" 动态设置列锁定、解除锁定","code":"/**\r\n*\r\n* @title 动态设置列锁定、解除锁定\r\n* @parent 列操作-锁定 Fixed\r\n* @description 动态设置columns中数据的fixed属性值【fixed: \"left\"，fixed: \"right\"】。\r\n*\r\n*/\r\nimport React, { Component } from 'react';\r\nimport {Icon,Menu,Dropdown} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst { Item } = Menu;\r\n\r\nconst columns24 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100,\r\n    fixed: \"left\",\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 100,\r\n    fixed: \"left\",\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 100, \r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width: 150 \r\n  },\r\n  {\r\n    title: \"对手\",\r\n    dataIndex: \"e\",\r\n    key: \"e\",\r\n    width: 100 \r\n  },\r\n  {\r\n    title: \"帮派\",\r\n    dataIndex: \"f\",\r\n    key: \"f\",\r\n    width: 100 \r\n  },\r\n  {\r\n    title: \"武功类型\",\r\n    dataIndex: \"g\",\r\n    key: \"g\",\r\n    width: 150 \r\n  },\r\n  {\r\n    title: \"师傅\",\r\n    dataIndex: \"k\",\r\n    key: \"k\",\r\n    // width: 100 \r\n  },\r\n  {\r\n    title: \"攻击系数\",\r\n    dataIndex: \"h\",\r\n    key: \"h\",\r\n    width: 100 \r\n  }\r\n];\r\n\r\n\r\nconst data24 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行',e:'黄荣',f:'古墓派',g:'剑术',k:'小龙女',h:'0.5', key: \"1\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'剑客',e:'自己',f:'无',g:'剑术',k:'无',h:'0.5', key: \"2\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠',e:'黄荣',f:'朝廷',g:'内容',k:'外侵势力',h:'0.6', key: \"3\" }\r\n]; \r\n \r\nclass Demo24 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      columns:columns24\r\n    }\r\n  }\r\n  \r\n  onSelect = ({key,item})=>{ \r\n    console.log(`${key} selected`); //获取key\r\n    let currentObject = item.props.data; //获取选中对象的数据\r\n    let {columns} = this.state;\r\n    let fixedCols = [];\r\n    let nonColums = [];\r\n    columns.find(da=>{\r\n      if(da.key == key){\r\n        da.fixed?delete da.fixed:da.fixed = 'left';\r\n      }\r\n      da.fixed?fixedCols.push(da):nonColums.push(da);\r\n    });\r\n  \r\n    columns = [...fixedCols,...nonColums]\r\n\r\n    this.setState({\r\n      columns\r\n    });\r\n  }\r\n  //表头增加下拉菜单\r\n  renderColumnsDropdown(columns) {\r\n    const icon ='uf-arrow-down';\r\n    \r\n    return columns.map((originColumn,index) => {\r\n      let column = Object.assign({}, originColumn);\r\n      let menuInfo = [], title='锁定';\r\n      if(originColumn.fixed){\r\n        title = '解锁'\r\n      }\r\n      menuInfo.push({\r\n        info:title,\r\n        key:originColumn.key,\r\n        index:index\r\n      });\r\n      const menu = (\r\n        <Menu onSelect={this.onSelect} >{\r\n            menuInfo.map(da=>{ return <Item key={da.key} data={da} >{da.info}</Item> })\r\n            }\r\n        </Menu>)\r\n      column.title = (\r\n        <span className='title-con drop-menu'>\r\n          {column.title}\r\n          <Dropdown\r\n            trigger={['click']} \r\n            overlay={menu}\r\n            animation=\"slide-up\"\r\n          >\r\n           <Icon type={icon}/>\r\n          </Dropdown> \r\n          \r\n        </span>\r\n      );\r\n      return column;\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n    let {columns} = this.state;\r\n    columns = this.renderColumnsDropdown(columns);\r\n    return(\r\n      <div className=\"demo24\">\r\n        <Table columns={columns} data={data24} scroll={{ x: \"110%\", y: 240 }}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","desc":" 动态设置columns中数据的fixed属性值【fixed: \"left\"，fixed: \"right\"】。","scss_code":"th{\r\n    .drop-menu{\r\n        .uf{\r\n            font-size: 12px;\r\n            visibility: hidden;\r\n            margin-left: 15px;\r\n        }\r\n        \r\n    \r\n    }\r\n    &:hover{\r\n        .uf{\r\n                visibility: visible;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"},{"example":<Demo62 />,"title":" 按条件、值过滤","code":"/**\r\n*\r\n* @title 按条件、值过滤\r\n* @parent 列操作-过滤 Filter\r\n* @description 可以根据输入项目以及判断条件对表格内的数据进行过滤\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table } from 'tinper-bee';\r\n\r\n\r\nconst columns26 = [\r\n  { title: \"姓名\", width: 180, dataIndex: \"name\", key: \"name\", filterType: \"text\", filterDropdown: \"show\" },\r\n  { title: \"年龄\", width: 150, dataIndex: \"age\", key: \"age\", filterType: \"dropdown\", filterDropdown: \"show\" },\r\n  { title: \"日期\", width: 200, dataIndex: \"date\", key: \"date\", filterType: \"date\", filterDropdown: \"show\", format: \"YYYY-MM-DD\" },\r\n  { title: \"居住地址\", width: 150, dataIndex: \"address\", key: \"address\", filterType: \"dropdown\", filterDropdown: \"show\" },\r\n  { title: \"备注\", dataIndex: \"mark\", key: \"mark\" }\r\n];\r\n\r\nconst data26 = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    date: \"2018-09-19\",\r\n    address: \"朝阳区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"朝阳区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"东城区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"4\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"东城区\",\r\n    mark: \"无\"\r\n  }, {\r\n    key: \"5\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"6\",\r\n    name: \"Jim Green\",\r\n    age: 48,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"7\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"8\",\r\n    name: \"Jim Green\",\r\n    age: 38,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  }\r\n];\r\n\r\nclass Demo26 extends Component {\r\n  handlerFilterChange = (key, val, condition) => {\r\n    console.log('参数：key=', key, ' value=', val, 'condition=', condition);\r\n  }\r\n\r\n  handlerFilterClear = (key) => {\r\n    console.log('清除条件', key);\r\n  }\r\n  render() {\r\n    return <Table\r\n      onFilterChange={this.handlerFilterChange}//下拉条件的回调(key,val)=>()\r\n      onFilterClear={this.handlerFilterClear}//触发输入操作以及其他的回调(key,val)=>()\r\n      filterDelay={500}//输入文本多少ms触发回调函数，默认300ms\r\n      filterable={true}//是否开启过滤数据功能\r\n      bordered\r\n      columns={columns26}\r\n      data={data26} />;\r\n  }\r\n}\r\n\r\n","desc":" 可以根据输入项目以及判断条件对表格内的数据进行过滤"},{"example":<Demo63 />,"title":" 复杂表格中行过滤","code":"/**\r\n*\r\n* @title 复杂表格中行过滤\r\n* @parent 列操作-过滤 Filter\r\n* @description 在过滤数据行的基础上增加列拖拽、动态菜单显示、下拉条件动态传入自定义等\r\n*\r\n*/\r\n\r\n/**\r\n * @description \r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport {Icon,Checkbox,Dropdown,Menu} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\nimport multiSelect from \"tinper-bee/lib/multiSelect\";;\r\nimport sort from \"tinper-bee/lib/sort\";;\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst data27 = [\r\n  {\r\n    key: \"1\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    date: \"2018-09-19\",\r\n    address: \"朝阳区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"2\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"朝阳区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"3\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"东城区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"4\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"东城区\",\r\n    mark: \"无\"\r\n  }, {\r\n    key: \"5\",\r\n    name: \"John Brown\",\r\n    age: 32,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"6\",\r\n    name: \"Jim Green\",\r\n    age: 48,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"7\",\r\n    name: \"Jim Green\",\r\n    age: 40,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  },\r\n  {\r\n    key: \"8\",\r\n    name: \"Jim Green\",\r\n    age: 38,\r\n    date: \"2018-09-18\",\r\n    address: \"海淀区\",\r\n    mark: \"无\"\r\n  }\r\n];\r\n\r\n\r\nconst MultiSelectTable = multiSelect(Table, Checkbox);\r\nconst ComplexTable = sort(MultiSelectTable, Icon);\r\nclass Demo27 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dropdownvalue: []\r\n    }\r\n  }\r\n  handlerFilterChange = (key, val, condition) => {\r\n    console.log('参数：key=', key, ' value=', val, 'condition=', condition);\r\n  }\r\n\r\n  handlerFilterClear = (key) => {\r\n    console.log('清除条件', key);\r\n  }\r\n  getSelectedDataFunc = data => {\r\n    console.log(data);\r\n  }\r\n  onClick = (item) => {\r\n    console.log(item);\r\n  }\r\n\r\n  render() {\r\n    const menu1 = (\r\n      <Menu onClick={this.onClick} style={{ width: 240 }} mode=\"vertical\" >\r\n        <SubMenu key=\"sub1\" title={<span><span>组织 1</span></span>}>\r\n          <MenuItemGroup title=\"Item 1\">\r\n            <Menu.Item key=\"1\">选项 1</Menu.Item>\r\n            <Menu.Item key=\"2\">选项 2</Menu.Item>\r\n          </MenuItemGroup>\r\n          <MenuItemGroup title=\"Iteom 2\">\r\n            <Menu.Item key=\"3\">选项 3</Menu.Item>\r\n            <Menu.Item key=\"4\">选项 4</Menu.Item>\r\n          </MenuItemGroup>\r\n        </SubMenu>\r\n      </Menu>)\r\n    let multiObj = {\r\n      type: \"checkbox\"\r\n    };\r\n    let columns27 = [\r\n      {\r\n        title: \"\", width: 40, dataIndex: \"key\", key: \"key\", render: (text, record, index) => {\r\n          return <Dropdown\r\n            trigger={['click']}\r\n            overlay={menu1}\r\n            animation=\"slide-up\"\r\n          >\r\n            <Icon style={{ \"visibility\": \"hidden\" }} type=\"uf-eye\" />\r\n          </Dropdown>\r\n        }\r\n      },\r\n      {\r\n        title: \"姓名\",\r\n        width: 180,\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        filterType: \"text\",//输入框类型\r\n        filterDropdown: \"show\",//显示条件\r\n        filterDropdownType: \"string\"//字符条件\r\n      },\r\n      {\r\n        title: \"年龄\",\r\n        width: 180,\r\n        dataIndex: \"age\",\r\n        key: \"age\",\r\n        filterType: \"number\",//输入框类型\r\n        filterDropdown: \"show\",//显示条件\r\n        filterDropdownType: \"number\"//字符条件\r\n      },\r\n      {\r\n        title: \"日期\",\r\n        width: 190,\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        filterType: \"date\",//输入框类型\r\n        filterDropdown: \"show\",//显示条件\r\n        filterDropdownType: \"string\"//字符条件\r\n      },\r\n      {\r\n        title: \"时间范围\",\r\n        width: 290,\r\n        dataIndex: \"mark\",\r\n        key: \"mark\",\r\n        filterType: \"daterange\",//输入框类型\r\n        filterDropdown: \"show\",//显示条件\r\n        filterDropdownType: \"number\"//字符条件\r\n      },\r\n      {\r\n        title: \"地址\",\r\n        width: 100,\r\n        dataIndex: \"address\",\r\n        key: \"address\",\r\n        filterType: \"dropdown\",//输入框类型\r\n        filterDropdown: \"show\",//显示条件\r\n        filterDropdownType: \"number\"//字符条件\r\n      }\r\n    ];\r\n    return <ComplexTable\r\n      onFilterChange={this.handlerFilterChange}//下拉条件的回调(key,val)=>()\r\n      onFilterClear={this.handlerFilterClear}//触发输入操作以及其他的回调(key,val)=>()\r\n      filterDelay={500}//输入文本多少ms触发回调函数，默认500ms\r\n      filterable={true}//是否开启过滤数据功能\r\n      getSelectedDataFunc={this.getSelectedDataFunc}\r\n      bordered\r\n      multiSelect={multiObj}\r\n      columns={columns27}\r\n      data={data27} />;\r\n  }\r\n}\r\n\r\n","desc":" 在过滤数据行的基础上增加列拖拽、动态菜单显示、下拉条件动态传入自定义等"},{"example":<Demo71 />,"title":" 列过滤面板","code":"/**\r\n*\r\n* @title 列过滤面板\r\n* @parent 列操作-隐藏 Hide\r\n* @description 点击表格右侧按钮，进行表格列的数据过滤。可以自定义设置显示某列，通过ifshow属性控制，默认为true都显示。afterFilter为过滤之后的回调函数\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {Icon,Checkbox,Popover,Popconfirm} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\nimport filterColumn from \"tinper-bee/lib/filterColumn\";;\r\nimport sum from \"tinper-bee/lib/sum\";;\r\n\r\nconst data21 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行',e: \"操作\", key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠',e: \"操作\", key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠',e: \"操作\", key: \"3\" }\r\n];\r\n\r\nconst FilterColumnTable = filterColumn(Table, Popover, Icon);\r\n\r\nconst defaultProps21 = {\r\n  prefixCls: \"bee-table\"\r\n};\r\n\r\nclass Demo21 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n              columns21: [\r\n                {\r\n                  title: \"名字\",\r\n                  dataIndex: \"a\",\r\n                  key: \"a\"\r\n                  // width: 100\r\n                },\r\n                {\r\n                  title: \"性别\",\r\n                  dataIndex: \"b\",\r\n                  key: \"b\",\r\n                  // width: 100\r\n                },\r\n                {\r\n                  title: \"年龄\",\r\n                  dataIndex: \"c\",\r\n                  key: \"c\",\r\n                  ifshow:false,\r\n                  // width: 200,\r\n                  // sumCol: true,\r\n                  sorter: (a, b) => a.c - b.c\r\n                },\r\n                {\r\n                  title: \"武功级别\",\r\n                  dataIndex: \"d\",\r\n                  key: \"d\"\r\n                }\r\n              ]};\r\n  }\r\n  afterFilter = (optData,columns)=>{\r\n    if(optData.key == 'b'){\r\n        if(optData.ifshow){\r\n          columns[2].ifshow = false;\r\n        }else{\r\n          columns[2].ifshow = true;\r\n        }\r\n        this.setState({\r\n          columns21 :columns,\r\n          showFilterPopover:true\r\n        });\r\n    }\r\n    \r\n  }\r\n \r\n  render() {\r\n    \r\n    return <FilterColumnTable columns={this.state.columns21} data={data21} afterFilter={this.afterFilter} showFilterPopover={this.state.showFilterPopover}/>;\r\n  }\r\n}\r\nDemo21.defaultProps = defaultProps21;\r\n\r\n\r\n","desc":" 点击表格右侧按钮，进行表格列的数据过滤。可以自定义设置显示某列，通过ifshow属性控制，默认为true都显示。afterFilter为过滤之后的回调函数"},{"example":<Demo81 />,"title":" 列排序","code":"/**\r\n* @title 列排序\r\n* @parent 列操作-排序 Sort\r\n* @description  column中增加sorter: (a, b) => a.c - b.c 这里的a,b代表前后两个数据，c代表比较当前对象的字段名称\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {Icon} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\nimport sort from \"tinper-bee/lib/sort.js\";;\r\n\r\nlet ComplexTable = sort(Table, Icon);\r\nconst columns11 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200,\r\n    sorter: (a, b) => a.c - b.c\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\"\r\n  }\r\n];\r\n\r\nconst data11 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"3\" }\r\n];\r\n\r\nconst defaultProps11 = {\r\n  prefixCls: \"bee-table\"\r\n};\r\nclass Demo11 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sortOrder: \"\",\r\n      data: data11\r\n    };\r\n  }\r\n  render() {\r\n\r\n    return <ComplexTable columns={columns11} data={this.state.data} />;\r\n  }\r\n}\r\nDemo11.defaultProps = defaultProps11;\r\n\r\n\r\n","desc":"  column中增加sorter: (a, b) => a.c - b.c 这里的a,b代表前后两个数据，c代表比较当前对象的字段名称"},{"example":<Demo82 />,"title":" 后端列排序","code":"/**\r\n* @title 后端列排序\r\n* @parent 列操作-排序 Sort\r\n* @description 可在控制台中查看序列化后的参数字符串，将参数传递给后端即可进行列排序\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {Icon} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\nimport sort from \"tinper-bee/lib/sort.js\";;\r\nlet ComplexTable = sort(Table, Icon);\r\n\r\nconst columns11 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200,\r\n    sorter: (a, b) => a.c - b.c\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\"\r\n  },\r\n  {\r\n    title: \"分数\",\r\n    dataIndex: \"e\",\r\n    key: \"e\",\r\n    sorter: (a, b) => a.c - b.c\r\n  },\r\n];\r\n\r\nconst data11 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行', e:139,key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', e:109, key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', e:159, key: \"3\" }\r\n];\r\n\r\nconst defaultProps = {\r\n  prefixCls: \"bee-table\"\r\n};\r\nclass Demo28 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sortOrder: \"\",\r\n      data: data11\r\n    };\r\n  }\r\n  /**\r\n   * 后端获取数据\r\n   */\r\n  sortFun = (sortParam)=>{\r\n    console.info(sortParam);\r\n    //将参数传递给后端排序\r\n  }\r\n  render() {\r\n    let sortObj = {\r\n      mode:'multiple',\r\n      backSource:true,\r\n      sortFun:this.sortFun\r\n    }\r\n    return <ComplexTable columns={columns11} data={this.state.data} sort={sortObj}/>;\r\n  }\r\n}\r\nDemo28.defaultProps = defaultProps;\r\n\r\n\r\n","desc":" 可在控制台中查看序列化后的参数字符串，将参数传递给后端即可进行列排序"},{"example":<Demo83 />,"title":" 多列排序","code":"/**\r\n *\r\n * @title 多列排序\r\n * @parent 列操作-排序 Sort\r\n * @description 多列排序、全选功能、合计（通过使用的封装好的功能方法实现复杂功能，简单易用！）新增回调函数(sorterClick)\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Checkbox,Button,Icon} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\nimport multiSelect from \"tinper-bee/lib/multiSelect.js\";;\r\nimport sort from \"tinper-bee/lib/sort.js\";;\r\nimport sum from \"tinper-bee/lib/sum.js\";;\r\n\r\nconst columns13 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    className:'dfasd',\r\n    width: 200\r\n  },\r\n  {\r\n    title: \"功力指数\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 200,\r\n    sumCol: true,\r\n    sorter: (a, b) => a.c - b.c,\r\n    sorterClick:(data,type)=>{//排序的回调函数\r\n      //type value is up or down\r\n      console.log(\"data\",data);\r\n    }\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200,\r\n    sumCol: true,\r\n    sorter: (a, b) => a.c - b.c,\r\n    sorterClick:(data,type)=>{//排序的回调函数\r\n      //type value is up or down\r\n      console.log(\"data\",data);\r\n    }\r\n  },\r\n  {\r\n    title: \"成绩\",\r\n    dataIndex: \"e\",\r\n    key: \"e\",\r\n    width: 200,\r\n    sumCol: true,\r\n    sorter: (a, b) => a.c - b.c,\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width: 200\r\n  }\r\n];\r\n\r\nconst data13 = [\r\n  { a: \"杨过\", b: 675, c: 30, d: \"内行\",e:100, key: \"2\" },\r\n  { a: \"令狐冲\", b: 43, c: 41, d: \"大侠\",e:90, key: \"1\" },\r\n  { a: \"令狐冲1\", b: 43, c: 81, d: \"大侠\", e:120,key: \"4\" },\r\n  { a: \"令狐冲2\", b: 43, c: 81, d: \"大侠\", e:130,key: \"5\" },\r\n  { a: \"郭靖\", b: 153, c: 25, d: \"大侠\",e:90, key: \"3\" }\r\n];\r\n\r\n\r\n//拼接成复杂功能的table组件不能在render中定义，需要像此例子声明在组件的外侧，不然操作state会导致功能出现异常\r\nlet ComplexTable = multiSelect(sort(sum(Table, Icon)), Checkbox);\r\n\r\nclass Demo13 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data13: data13,\r\n      selectedRow: this.selectedRow,\r\n      selectDisabled: this.selectDisabled\r\n    };\r\n  }\r\n  getSelectedDataFunc = data => {\r\n    console.log(data);\r\n  };\r\n  selectDisabled = (record, index) => {\r\n    // console.log(record);\r\n    if (index === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  selectedRow = (record, index) => {\r\n    // console.log(record);\r\n    if (index === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  onClick = () => {\r\n    this.setState({\r\n      selectedRow: function() {}\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let multiObj = {\r\n      type: \"checkbox\"\r\n    };\r\n    let sortObj = {\r\n      mode:'multiple'\r\n    }\r\n   \r\n    return (\r\n      <div>\r\n        <Button className=\"editable-add-btn\" onClick={this.onClick}>\r\n          change selectedRow\r\n        </Button>\r\n        <ComplexTable\r\n          selectDisabled={this.state.selectDisabled}\r\n          selectedRow={this.state.selectedRow}\r\n          columns={columns13}\r\n          data={this.state.data13}\r\n          multiSelect={multiObj}\r\n          sort={sortObj}\r\n          getSelectedDataFunc={this.getSelectedDataFunc}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","desc":" 多列排序、全选功能、合计（通过使用的封装好的功能方法实现复杂功能，简单易用！）新增回调函数(sorterClick)"},{"example":<Demo91 />,"title":" 拖拽改变列顺序","code":"/**\r\n*\r\n* @title 拖拽改变列顺序\r\n* @parent 列操作-拖拽 Drag\r\n* @description 点击列的表头，进行左右拖拽，注意：固定列不可以交换\r\n*/\r\nimport React, { Component } from 'react';\r\nimport {Icon} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee'; \r\nimport dragColumn from \"tinper-bee/lib/dragColumn\";;\r\n\r\nconst columns22 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 200\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200,\r\n    sumCol: true,\r\n    sorter: (a, b) => a.c - b.c\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width: 200,\r\n  }\r\n];\r\n\r\nconst data22 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"3\" }\r\n];\r\n\r\nconst DragColumnTable = dragColumn(Table);\r\n\r\nconst defaultProps22 = {\r\n  prefixCls: \"bee-table\"\r\n};\r\n\r\nclass Demo22 extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n \r\n  render() {\r\n    return <DragColumnTable columns={columns22} data={data22} bordered\r\n    \r\n    draggable={true} \r\n    />;\r\n  }\r\n}\r\nDemo22.defaultProps = defaultProps22;\r\n\r\n\r\n","desc":" 点击列的表头，进行左右拖拽，注意：固定列不可以交换"},{"example":<Demo92 />,"title":" 拖拽改变列宽度","code":"/**\r\n*\r\n* @title 拖拽改变列宽度\r\n* @parent 列操作-拖拽 Drag\r\n* @description 注：不支持tree结构的表头、合并表头的table\r\n*/\r\nimport React, { Component } from 'react';\r\nimport {Icon} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee'; \r\nimport dragColumn from \"tinper-bee/lib/dragColumn\";;\r\n\r\nconst columns23 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: '200',\r\n    fixed:'left'\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: '600'\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: '200',\r\n    sumCol: true,\r\n    sorter: (a, b) => a.c - b.c\r\n  }, \r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width: 500,\r\n  }\r\n];\r\n\r\nconst data23 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"31\" } , { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"21\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"11\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"32\" } , { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"22\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"12\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"3\" }\r\n];\r\n\r\nconst DragColumnTable = dragColumn(Table);\r\n\r\nconst defaultProps23 = {\r\n  prefixCls: \"bee-table\"\r\n};\r\n\r\nclass Demo23 extends Component {\r\n  constructor(props) {\r\n    super(props); \r\n  }\r\n\r\n  render() {\r\n    return <DragColumnTable columns={columns23} data={data23} bordered\r\n    dragborder={true} \r\n    draggable={true} \r\n    scroll={{y:200}}\r\n    onDropBorder ={(e,width)=>{\r\n      console.log(width+\"--调整列宽后触发事件\",e.target);\r\n    }}\r\n    />;\r\n  }\r\n}\r\nDemo23.defaultProps = defaultProps23;\r\n\r\n\r\n","desc":" 注：不支持tree结构的表头、合并表头的table"},{"example":<Demo101 />,"title":" 嵌套子表格","code":"/**\r\n*\r\n* @title 嵌套子表格\r\n* @parent 扩展行 Expanded Row\r\n* @description 通过expandedRowRender参数来实现子表格\r\n*\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Popconfirm } from 'tinper-bee';\r\nimport { Table } from 'tinper-bee';\r\nimport dragColumn from \"tinper-bee/lib/dragColumn\";;\r\nconst DragColumnTable = dragColumn(Table);\r\nconst columns16 = [\r\n  {\r\n    title: \"操作\",\r\n    dataIndex: \"d\",\r\n    key: \"d\", \r\n    width:200,\r\n    render(text, record, index) {\r\n      return (\r\n        <Popconfirm trigger=\"click\" placement=\"right\" content={'这是第' + index + '行，内容为:' + text}>\r\n          <a href=\"javascript:;\" tooltip={text} >\r\n          一些操作\r\n          </a>\r\n        </Popconfirm>\r\n      );\r\n    }\r\n  },\r\n  { title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 250 },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n  \r\n];\r\nconst columns17 = [\r\n  {\r\n    title: \"操作\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width:200,\r\n    render(text, record, index) {\r\n      return (\r\n        <Popconfirm trigger=\"click\" placement=\"right\" content={'这是第' + index + '行，内容为:' + text}>\r\n          <a href=\"javascript:;\" tooltip={text} >\r\n          一些操作\r\n          </a>\r\n        </Popconfirm>\r\n      );\r\n    }\r\n  },\r\n  { title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 100 },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n  \r\n];\r\n\r\nconst data16 = [\r\n  { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n  { a: \"杨过\", b: \"男\", c: 67, d: \"操作\", key: \"2\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25, d: \"操作\", key: \"3\" }\r\n];\r\n\r\n\r\nclass Demo16 extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      data_obj:{}\r\n    }\r\n  }\r\n  expandedRowRender = (record, index, indent) => {\r\n    let height = 42 * (this.state.data_obj[record.key].length+ 2);\r\n    \r\n    return (\r\n      <Table\r\n        columns={columns17}\r\n        style={{height:height}}\r\n        data={this.state.data_obj[record.key]} \r\n       \r\n      />\r\n    );\r\n  };\r\n  getData=(expanded, record)=>{\r\n    //当点击展开的时候才去请求数据\r\n    let new_obj = Object.assign({},this.state.data_obj);\r\n    if(expanded){\r\n      if(record.key==='1'){\r\n        new_obj[record.key] = [\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n          { a: \"杨过\", b: \"男\", c: 67, d: \"操作\", key: \"2\" }\r\n        ]\r\n        this.setState({\r\n          data_obj:new_obj\r\n        })\r\n      }else{\r\n        new_obj[record.key] = [\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" }\r\n        ]\r\n        this.setState({\r\n          data_obj:new_obj\r\n        })\r\n      }\r\n    }\r\n  }\r\n  haveExpandIcon=(record, index)=>{\r\n    //控制是否显示行展开icon，该参数只有在和expandedRowRender同时使用才生效\r\n    if(index == 0){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  render() {\r\n    return (\r\n      <DragColumnTable\r\n        columns={columns16}\r\n        data={data16}\r\n        onExpand={this.getData}\r\n        expandedRowRender={this.expandedRowRender}\r\n        scroll={{x:true}}\r\n        dragborder={true} \r\n        draggable={true} \r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 通过expandedRowRender参数来实现子表格"},{"example":<Demo102 />,"title":" 树型表格数据展示","code":"/**\r\n*\r\n* @title 树型表格数据展示\r\n* @parent 扩展行 Expanded Row\r\n* @description 通过在data中配置children数据，来自动生成树形表格\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Table } from 'tinper-bee';\r\n\r\n\r\nconst columns4 = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    width: \"40%\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    dataIndex: \"age\",\r\n    key: \"age\",\r\n    width: \"30%\"\r\n  },\r\n  {\r\n    title: \"Address\",\r\n    dataIndex: \"address\",\r\n    key: \"address\"\r\n  }\r\n];\r\n\r\nconst data4 = [\r\n  {\r\n    key: 1,\r\n    name: \"John Brown sr.\",\r\n    age: 60,\r\n    address: \"New York No. 1 Lake Park\",\r\n    children: [\r\n      {\r\n        key: 11,\r\n        name: \"John Brown\",\r\n        age: 42,\r\n        address: \"New York No. 2 Lake Park\"\r\n      },\r\n      {\r\n        key: 12,\r\n        name: \"John Brown jr.\",\r\n        age: 30,\r\n        address: \"New York No. 3 Lake Park\",\r\n        children: [\r\n          {\r\n            key: 121,\r\n            name: \"Jimmy Brown\",\r\n            age: 16,\r\n            address: \"New York No. 3 Lake Park\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        key: 13,\r\n        name: \"Jim Green sr.\",\r\n        age: 72,\r\n        address: \"London No. 1 Lake Park\",\r\n        children: [\r\n          {\r\n            key: 131,\r\n            name: \"Jim Green\",\r\n            age: 42,\r\n            address: \"London No. 2 Lake Park\",\r\n            children: [\r\n              {\r\n                key: 1311,\r\n                name: \"Jim Green jr.\",\r\n                age: 25,\r\n                address: \"London No. 3 Lake Park\"\r\n              },\r\n              {\r\n                key: 1312,\r\n                name: \"Jimmy Green sr.\",\r\n                age: 18,\r\n                address: \"London No. 4 Lake Park\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    key: 2,\r\n    name: \"Joe Black\",\r\n    age: 32,\r\n    address: \"Sidney No. 1 Lake Park\"\r\n  }\r\n];\r\nclass Demo4 extends Component {\r\n\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        data: data4,\r\n        factoryValue: 0,\r\n        selectedRow: new Array(data4.length)//状态同步\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return <Table \r\n    rowClassName={(record,index,indent)=>{\r\n      if (this.state.selectedRow[index]) {\r\n          return 'selected';\r\n      } else {\r\n          return '';\r\n      }\r\n    }}\r\n    onRowClick={(record,index,indent)=>{\r\n      let selectedRow = new Array(this.state.data.length);\r\n      selectedRow[index] = true;\r\n      this.setState({\r\n          factoryValue: record,\r\n          selectedRow: selectedRow\r\n      });\r\n    }}\r\n    \r\n    columns={columns4} data={data4} />;\r\n  }\r\n}\r\n\r\n\r\n","desc":" 通过在data中配置children数据，来自动生成树形表格"},{"example":<Demo103 />,"title":" 选中行颜色、自定义表格标题和表尾","code":"/**\r\n*\r\n* @title 选中行颜色、自定义表格标题和表尾\r\n* @parent 扩展行 Expanded Row\r\n* @description 选中行的样式可自定义\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip,} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n  { title: \"用户名\", dataIndex: \"a\", key: \"a\", width:80 , className:\"rowClassName\"},\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n];\r\n\r\nconst data = [\r\n  { a: \"令狐冲\", b: \"男\", c: 41, key: \"1\" },\r\n  { a: \"黄蓉\", b: \"男\", c: 67, key: \"2\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25, key: \"3\" }\r\n];\r\n\r\nclass Demo26 extends Component {\r\n\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        data: data,\r\n        selectedRowIndex: 0\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        rowClassName={(record,index,indent)=>{\r\n          if (this.state.selectedRowIndex == index) {\r\n              return 'selected';\r\n          } else {\r\n              return '';\r\n          }\r\n        }}\r\n        onRowClick={(record,index,indent)=>{\r\n          this.setState({ \r\n              selectedRowIndex: index\r\n          });\r\n        }}\r\n        title={currentData => <div>标题: 这是一个标题</div>}\r\n        footer={currentData => <div>表尾: 我是小尾巴</div>}\r\n      /> \r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 选中行的样式可自定义"},{"example":<Demo104 />,"title":" 紧凑型、宽松型","code":"/**\r\n*\r\n* @title 紧凑型、宽松型\r\n* @parent 扩展行 Expanded Row\r\n* @description 设置`size`属性使用紧凑型表格(`sm`)或宽松型表格(`lg`)。\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip,Tag} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n    { title: \"订单编号\", dataIndex: \"orderNum\", key: \"orderNum\", width: 100 },\r\n    { title: \"采购组织\", dataIndex: \"org\", key: \"org\", width: 200 },\r\n    { title: \"供应商\", dataIndex: \"supplier\", key: \"supplier\", width: 100 },\r\n    { title: \"订单日期\", dataIndex: \"orderDate\", key: \"orderDate\", width: 150 },\r\n    { title: \"总数量\", dataIndex: \"quantity\", key: \"quantity\", width: 100 },\r\n    { title: \"单据状态\", dataIndex: \"status\", key: \"status\", width: 100 },\r\n    { title: \"提交人\", dataIndex: \"submitter\", key: \"submitter\", width: 100 },\r\n    { title: \"单位\", dataIndex: \"unit\", key: \"unit\", width: 100 },\r\n    { title: \"总税价合计\", dataIndex: \"sum\", key: \"sum\", width: 100 },\r\n];\r\n\r\nconst data = [\r\n    { \r\n        orderNum: \"NU0391025\", \r\n        org: \"用友网络科技股份有限公司\", \r\n        supplier: \"xx供应商\", \r\n        orderDate: '2018年03月18日', \r\n        quantity: '100.00', \r\n        status: '错误', \r\n        submitter: '小张', \r\n        unit: 'pc', \r\n        sum:'8,487.00', \r\n        key: \"1\" \r\n    },\r\n    { \r\n        orderNum: \"NU0391026\", \r\n        org: \"用友网络科技股份有限公司\", \r\n        supplier: \"xx供应商\", \r\n        orderDate: '2018年02月05日', \r\n        quantity: '91.00', \r\n        status: '正常', \r\n        submitter: '小红', \r\n        unit: 'pc', \r\n        sum:'675.00', \r\n        key: \"2\" \r\n    },\r\n    { \r\n        orderNum: \"NU0391027\", \r\n        org: \"用友网络科技股份有限公司\", \r\n        supplier: \"xx供应商\", \r\n        orderDate: '2018年07月01日', \r\n        quantity: '98.00', \r\n        status: '异常', \r\n        submitter: '小李', \r\n        unit: 'pc', \r\n        sum:'1,531.00', \r\n        key: \"3\" \r\n    }\r\n];\r\n\r\nclass Demo1 extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n            <h5>紧凑型表格</h5>\r\n            <Table columns={columns} data={data} size=\"sm\" />\r\n            <h5>宽松型表格</h5>\r\n            <Table columns={columns} data={data} size=\"lg\" />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 设置`size`属性使用紧凑型表格(`sm`)或宽松型表格(`lg`)。"},{"example":<Demo105 />,"title":" 自定义行高","code":"/**\r\n*\r\n* @title 自定义行高\r\n* @parent 扩展行 Expanded Row\r\n* @description 设置`height`属性自定义表格行高，设置`headerHeight`属性自定义表头高度。\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n  {\r\n    title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 300, className: \"rowClassName\",\r\n    fixed:'left',\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"60px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 500},\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 }\r\n];\r\n\r\nconst data = [\r\n  { a: \"令狐冲\", b: \"男\", c: 41, key: \"1\" },\r\n  { a: \"杨过叔叔的女儿黄蓉\", b: \"男\", c: 67, key: \"2\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25, key: \"3\" }\r\n];\r\n\r\nclass Demo1 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data,\r\n      selectedRowIndex: 0\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    console.log('这是第' , this.currentIndex , '行');\r\n    console.log('内容：' , this.currentRecord);\r\n  }\r\n\r\n  onRowHover=(index,record)=>{\r\n    this.currentIndex = index;\r\n    this.currentRecord = record;\r\n  }\r\n\r\n  getHoverContent=()=>{\r\n    return <div className=\"opt-btns\"><Button size=\"sm\" onClick={this.handleClick}>一些操作</Button> </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n   \r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          parentNodeId='parent'\r\n          height={40}\r\n          headerHeight={40}\r\n          hoverContent={this.getHoverContent}\r\n          onRowHover={this.onRowHover}\r\n          onRowClick={(record, index, indent) => {\r\n            this.setState({\r\n              selectedRowIndex: index\r\n            });\r\n          }}\r\n        />\r\n\r\n     \r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 设置`height`属性自定义表格行高，设置`headerHeight`属性自定义表头高度。"},{"example":<Demo106 />,"title":" 图片在表格中的展示","code":"/**\r\n*\r\n* @title 图片在表格中的展示\r\n* @parent 扩展行 Expanded Row\r\n* @description 根据图片高度自动撑开行高，可结合图片查看器使用 http://design.yonyoucloud.com/tinper-bee/bee-viewer\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Button,Tooltip} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns = [\r\n    {\r\n        title: \"序号\",\r\n        dataIndex: \"index\",\r\n        key: \"index\",\r\n        width: 80,\r\n        render(text, record, index) {\r\n            return index + 1;\r\n        }\r\n    },\r\n    {\r\n        title: \"组织部门\",\r\n        dataIndex: \"orgDept\",\r\n        key: \"orgDept\",\r\n        width: 100,\r\n    },\r\n    {\r\n        title: \"设施管理部门\",\r\n        dataIndex: \"facilityManageUnit\",\r\n        key: \"facilityManageUnit\",\r\n        width: 150,\r\n    },\r\n    {\r\n        title: \"案卷编号\",\r\n        dataIndex: \"docketnum\",\r\n        key: \"docketnum\",\r\n        width: 100,\r\n    },\r\n    {\r\n        title: \"数量\",\r\n        dataIndex: \"num\",\r\n        key: \"num\",\r\n        width: 100,\r\n    },\r\n    {\r\n        title: \"首次发现时间\",\r\n        dataIndex: \"discoveryTime\",\r\n        key: \"discoveryTime\",\r\n        width: 150,\r\n    },\r\n    {\r\n        title: \"实际修复时间\",\r\n        dataIndex: \"repairTime\",\r\n        key: \"repairTime\",\r\n        width: 150,\r\n    },\r\n    {\r\n        title: \"图样\",\r\n        dataIndex: \"picture\",\r\n        key: \"picture\",\r\n        render(text, record, index) {\r\n            return <img style={{height:'50px'}} src={text} alt=\"Picture\"/>\r\n        }\r\n    }\r\n];\r\n\r\nconst data = [\r\n  { key: \"1\", orgDept: \"组织1\", facilityManageUnit: \"部门1\", docketnum: 41, num: \"1\", discoveryTime: \"2018-10-17\", repairTime: \"2018-10-30\", picture: \"http://design.yonyoucloud.com/static/bee.tinper.org-demo/swiper-demo-1-min.jpg\"},\r\n  { key: \"2\", orgDept: \"组织2\", facilityManageUnit: \"部门2\", docketnum: 30, num: \"2\", discoveryTime: \"2019-01-15\", repairTime: \"2019-01-20\", picture: \"http://design.yonyoucloud.com/static/bee.tinper.org-demo/swiper-demo-2-min.jpg\"},\r\n  { key: \"3\", orgDept: \"组织3\", facilityManageUnit: \"部门3\", docketnum: 35, num: \"3\", discoveryTime: \"2019-04-10\", repairTime: \"2019-04-17\", picture: \"http://design.yonyoucloud.com/static/bee.tinper.org-demo/swiper-demo-3-min.jpg\"}\r\n];\r\n\r\nclass Demo105 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data,\r\n      selectedRowIndex: 0\r\n    }\r\n  }\r\n  handleClick = () => {\r\n    console.log('这是第' , this.currentIndex , '行');\r\n    console.log('内容：' , this.currentRecord);\r\n  }\r\n\r\n  onRowHover=(index,record)=>{\r\n    this.currentIndex = index;\r\n    this.currentRecord = record;\r\n  }\r\n\r\n  getHoverContent=()=>{\r\n    return <div className=\"opt-btns\"><Button size=\"sm\" onClick={this.handleClick}>一些操作</Button> </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          parentNodeId='parent'\r\n          hoverContent={this.getHoverContent}\r\n          onRowHover={this.onRowHover}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 根据图片高度自动撑开行高，可结合图片查看器使用 http://design.yonyoucloud.com/tinper-bee/bee-viewer"},{"example":<Demo107 />,"title":" 自定义行、列合并","code":"/**\r\n*\r\n* @title 自定义行、列合并\r\n* @parent 扩展行 Expanded Row\r\n* @description 表头只支持列合并，使用 column 里的 colSpan 进行设置。表格支持行/列合并，使用 render 里的单元格属性 colSpan 或者 rowSpan 设值为 0 时，设置的表格不会渲染。\r\n*\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst renderContent = (value, row, index) => {\r\n  const obj = {\r\n    children: value,\r\n    props: {},\r\n  };\r\n  if (index === 4) {\r\n    obj.props.colSpan = 0;\r\n  }\r\n  return obj;\r\n};\r\n\r\nconst columns = [{\r\n  title: 'Name',\r\n  key: \"name\",\r\n  dataIndex: 'name',\r\n  render: (text, row, index) => {\r\n    if (index < 4) {\r\n      return <a href=\"#\">{text}</a>;\r\n    }\r\n    return {\r\n      children: <a href=\"#\">{text}</a>,\r\n      props: {\r\n        colSpan: 5,\r\n      },\r\n    };\r\n  },\r\n}, {\r\n  title: 'Age',\r\n  key: \"Age\",\r\n  dataIndex: 'age',\r\n  render: renderContent,\r\n}, {\r\n  title: 'Home phone',\r\n  colSpan: 2,\r\n  key: \"tel\",\r\n  dataIndex: 'tel',\r\n  render: (value, row, index) => {\r\n    const obj = {\r\n      children: value,\r\n      props: {},\r\n    };\r\n    if (index === 2) {\r\n      obj.props.rowSpan = 2;\r\n    }\r\n    if (index === 3) {\r\n      obj.props.rowSpan = 0;\r\n    }\r\n    if (index === 4) {\r\n      obj.props.colSpan = 0;\r\n    }\r\n    return obj;\r\n  },\r\n}, {\r\n  title: 'Phone',\r\n  colSpan: 0,\r\n  key: \"phone\",\r\n  dataIndex: 'phone',\r\n  render: renderContent,\r\n}, {\r\n  title: 'Address',\r\n  key: \"address\",\r\n  dataIndex: 'address',\r\n  render: renderContent,\r\n}];\r\n\r\nconst data = [{\r\n  key: '1',\r\n  name: 'John Brown',\r\n  age: 32,\r\n  tel: '0571-22098909',\r\n  phone: 18889898989,\r\n  address: 'New York No. 1 Lake Park',\r\n}, {\r\n  key: '2',\r\n  name: 'Jim Green',\r\n  tel: '0571-22098333',\r\n  phone: 18889898888,\r\n  age: 42,\r\n  address: 'London No. 1 Lake Park',\r\n}, {\r\n  key: '3',\r\n  name: 'Joe Black',\r\n  age: 32,\r\n  tel: '0575-22098909',\r\n  phone: 18900010002,\r\n  address: 'Sidney No. 1 Lake Park',\r\n}, {\r\n  key: '4',\r\n  name: 'Jim Red',\r\n  age: 18,\r\n  tel: '0575-22098909',\r\n  phone: 18900010002,\r\n  address: 'London No. 2 Lake Park',\r\n}, {\r\n  key: '5',\r\n  name: 'Jake White',\r\n  age: 18,\r\n  tel: '0575-22098909',\r\n  phone: 18900010002,\r\n  address: 'Dublin No. 2 Lake Park',\r\n}];\r\n\r\nclass Demo15 extends Component {\r\n  render() {\r\n    return (\r\n       <Table columns={columns} data={data}/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","desc":" 表头只支持列合并，使用 column 里的 colSpan 进行设置。表格支持行/列合并，使用 render 里的单元格属性 colSpan 或者 rowSpan 设值为 0 时，设置的表格不会渲染。"},{"example":<Demo121 />,"title":" 多选表格","code":"/**\r\n*\r\n* @title 多选表格\r\n* @parent 行操作-选择\r\n* @description 点击表格左列按钮即可选中，并且在选中的回调函数中能获取到选中的数据。支持多选、全选和禁止选择。\r\n*\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport {Checkbox} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\nimport multiSelect from \"tinper-bee/lib/multiSelect.js\";;\r\n\r\nconst columns12 = [\r\n  {\r\n    title: \"名字\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200,\r\n    sorter: (a, b) => a.c - b.c\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\"\r\n  }\r\n];\r\n\r\nconst data12 = [\r\n  { a: \"杨过\", b: \"男\", c: 30,d:'内行', key: \"2\",_checked:true },\r\n  { a: \"令狐冲\", b: \"男\", c: 41,d:'大侠', key: \"1\" ,_checked:false},\r\n  { a: \"郭靖\", b: \"男\", c: 25,d:'大侠', key: \"3\" ,_checked:false},\r\n  { a: \"郭靖1\", b: \"男\", c: 25,d:'大侠', key: \"4\" ,_disabled:true},\r\n  { a: \"郭靖2\", b: \"男\", c: 25,d:'大侠', key: \"5\" ,_checked:false}\r\n];\r\n//拼接成复杂功能的table组件不能在render中定义，需要像此例子声明在组件的外侧，不然操作state会导致功能出现异常\r\nlet MultiSelectTable  = multiSelect(Table, Checkbox);\r\n\r\nclass Demo12 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data12\r\n    };\r\n  }\r\n  /**\r\n   *@param selectedList:当前选中的行数据\r\n   *@param record 当前操作行数据\r\n   *@param index 当前操作行索引\r\n   * @memberof Demo12\r\n   */\r\n  getSelectedDataFunc = (selectedList,record,index) => {\r\n    console.log(\"selectedList\", selectedList,\"index\",index);\r\n    // 如果在回调中增加setState逻辑，需要同步data中的_checked属性。即下面的代码\r\n    // const allChecked = selectedList.length == 0?false:true;\r\n    // record为undefind则为全选或者全不选\r\n    // if(!record){\r\n    //   data12.forEach(item=>{\r\n    //     item._checked = allChecked;\r\n    //   })\r\n    // }else{\r\n    //   data12[index]['_checked'] = record._checked;\r\n    // } \r\n\r\n    \r\n  };\r\n  \r\n  render() {\r\n    let multiObj = {\r\n      type: \"checkbox\"\r\n    };\r\n    return (\r\n      <MultiSelectTable \r\n        columns={columns12} \r\n        data={data12} \r\n        multiSelect={multiObj}\r\n        rowClassName={(record,index,indent)=>{\r\n          if (record._checked) {\r\n              return 'selected';\r\n          } else {\r\n              return '';\r\n          }\r\n        }}\r\n        getSelectedDataFunc={this.getSelectedDataFunc}/>\r\n    );\r\n  }\r\n}\r\n\r\n","desc":" 点击表格左列按钮即可选中，并且在选中的回调函数中能获取到选中的数据。支持多选、全选和禁止选择。"},{"example":<Demo131 />,"title":" 万行以上数据渲染","code":"/**\r\n*\r\n* @title 万行以上数据渲染\r\n* @parent 无限滚动 Infinite-scroll\r\n* @description 万行数据渲染\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Tooltip} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\nimport BigData from \"tinper-bee/lib/bigData\";;\r\nconst BigDataTable = BigData(Table);\r\nconst columns = [\r\n    {\r\n        title:'序号',\r\n        dataIndex:'index',\r\n        width:'60',\r\n        key:'index',\r\n        render:(text,record,index)=>{\r\n            return index\r\n        }\r\n    },\r\n    {\r\n    title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 580, className: \"rowClassName\",\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"80px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 80},\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 }\r\n\r\n];\r\n\r\nconst data = [ ...new Array(10000) ].map((e, i) => {\r\n    const rs = { a: i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key: i };\r\n    if(i%3==0){\r\n        rs.b = '女';\r\n    }\r\n    return rs;\r\n   })\r\n\r\n\r\nclass Demo30 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data,\r\n      selectedRowIndex: 0\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <BigDataTable\r\n          columns={columns}\r\n          data={data}\r\n          scroll={{y:300}}\r\n          onRowClick={(record, index, indent) => {\r\n            console.log('currentIndex--'+index);\r\n          }}\r\n        />\r\n\r\n     \r\n    );\r\n  }\r\n}\r\n\r\n","desc":" 万行数据渲染","scss_code":".big-data tr td {\r\n    // height: 48px;\r\n}"},{"example":<Demo132 />,"title":" 嵌套子表格滚动加载","code":"/**\r\n*\r\n* @title 嵌套子表格滚动加载\r\n* @parent 无限滚动 Infinite-scroll\r\n* @description 通过expandedRowRender参数来实现子表格\r\n*\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Popconfirm} from 'tinper-bee';\r\nimport { Table } from 'tinper-bee';\r\nimport BigData from \"tinper-bee/lib/bigData\";;\r\nconst BigDataTable = BigData(Table);\r\nconst outColumns = [\r\n  {\r\n    title: \"操作\",\r\n    dataIndex: \"d\",\r\n    key: \"d\", \r\n    width:200,\r\n    render(text, record, index) {\r\n      return (\r\n        <Popconfirm trigger=\"click\" placement=\"right\" content={'这是第' + index + '行，内容为:' + text}>\r\n          <a href=\"javascript:;\">\r\n            一些操作\r\n          </a>\r\n        </Popconfirm>\r\n      );\r\n    }\r\n  },\r\n  { title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 250 },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n  \r\n];\r\nconst innerColumns = [\r\n  {\r\n    title: \"操作\",\r\n    dataIndex: \"d\",\r\n    key: \"d\",\r\n    width:200,\r\n    render(text, record, index) {\r\n      return (\r\n        <Popconfirm trigger=\"click\" placement=\"right\" content={'这是第' + index + '行，内容为:' + text}>\r\n          <a href=\"javascript:;\">\r\n            一些操作\r\n          </a>\r\n        </Popconfirm>\r\n      );\r\n    }\r\n  },\r\n  { title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 100 },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n  \r\n];\r\n\r\nconst data16 = [ ...new Array(10000) ].map((e, i) => {\r\n    return { a: i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key: i };\r\n   })\r\n\r\n\r\n\r\n\r\n\r\nclass Demo31 extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      data_obj:{\r\n        0:[\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n          { a: \"杨过\", b: \"男\", c: 67, d: \"操作\", key: \"2\" }\r\n        ],\r\n        1: [\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n          { a: \"菲菲\", b: \"nv\", c: 67, d: \"操作\", key: \"2\" }\r\n        ],\r\n      }\r\n    }\r\n  }\r\n  expandedRowRender = (record, index, indent) => {\r\n    let height = 200;\r\n    let innderData = [ ...new Array(100) ].map((e, i) => {\r\n      return { a: index+\"-\"+ i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key:  index+\"-\"+ i };\r\n     })\r\n    return (\r\n      <Table\r\n        \r\n        columns={innerColumns}\r\n        scroll={{y:height}}\r\n        data={innderData} \r\n\r\n      />\r\n    );\r\n  };\r\n  getData=(expanded, record)=>{\r\n    //当点击展开的时候才去请求数据\r\n    let new_obj = Object.assign({},this.state.data_obj);\r\n    if(expanded){\r\n      if(record.key==='1'){\r\n        new_obj[record.key] = [\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n          { a: \"杨过\", b: \"男\", c: 67, d: \"操作\", key: \"2\" }\r\n        ]\r\n        this.setState({\r\n          data_obj:new_obj\r\n        })\r\n      }else{\r\n        new_obj[record.key] = [\r\n          { a: \"令狐冲\", b: \"男\", c: 41, d: \"操作\", key: \"1\" },\r\n          { a: \"菲菲\", b: \"nv\", c: 67, d: \"操作\", key: \"2\" }\r\n        ]\r\n        this.setState({\r\n          data_obj:new_obj\r\n        })\r\n      }\r\n    }\r\n  }\r\n  haveExpandIcon=(record, index)=>{\r\n    //控制是否显示行展开icon，该参数只有在和expandedRowRender同时使用才生效\r\n    if(index == 0){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  render() {\r\n    return (\r\n      <BigDataTable\r\n        columns={outColumns}\r\n        data={data16}\r\n        onExpand={this.getData}\r\n        expandedRowRender={this.expandedRowRender}\r\n        scroll={{y:350}}\r\n        // defaultExpandedRowKeys={[0,1]}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 通过expandedRowRender参数来实现子表格"},{"example":<Demo133 />,"title":" 多功能表格滚动加载","code":"/**\r\n*\r\n* @title 多功能表格滚动加载\r\n* @parent 无限滚动 Infinite-scroll\r\n* @description\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Tooltip,Checkbox,Icon,Popover} from \"tinper-bee\";\r\nimport { Table } from 'tinper-bee';\r\nimport BigData from \"tinper-bee/lib/bigData\";;\r\nimport multiSelect from \"tinper-bee/lib/multiSelect\";;\r\nimport filterColumn from \"tinper-bee/lib/filterColumn\";;\r\n\r\nlet  ComplexTable = filterColumn(multiSelect(BigData(Table), Checkbox), Popover, Icon);\r\n\r\nconst columns = [\r\n    {\r\n        title:'序号',\r\n        dataIndex:'index',\r\n        width:'80',\r\n        key:'index',\r\n        render:(text,record,index)=>{\r\n            return index\r\n        }\r\n    },\r\n    {\r\n    title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 580, className: \"rowClassName\",\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"80px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 80},\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 }\r\n];\r\n\r\nconst data = [ ...new Array(10000) ].map((e, i) => {\r\n    const rs = { a: i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key: i };\r\n    if(i%3==0){\r\n        rs.b = '女';\r\n    }\r\n    return rs;\r\n   })\r\n\r\n\r\nclass Demo32 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data,\r\n      selectedRowIndex: 0\r\n    }\r\n  }\r\n  getSelectedDataFunc = data => {\r\n    console.log(data);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <ComplexTable\r\n          columns={columns}\r\n          data={data}\r\n          parentNodeId='parent'\r\n          scroll={{y:300}}\r\n          bordered\r\n          onRowClick={(record, index, indent) => {\r\n            this.setState({\r\n              selectedRowIndex: index\r\n            });\r\n          }}\r\n          getSelectedDataFunc={this.getSelectedDataFunc}/>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":""},{"example":<Demo134 />,"title":" 层级树大数据场景","code":"/**\r\n* @title 层级树大数据场景\r\n* @parent 无限滚动 Infinite-scroll\r\n* @description\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport {Tooltip} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\nimport BigData from \"tinper-bee/lib/bigData\";;\r\nconst BigDataTable = BigData(Table);\r\nconst columns = [\r\n    {\r\n        title:'序号',\r\n        dataIndex:'index',\r\n        width:'150',\r\n        key:'index',\r\n        render:(text,record,index)=>{\r\n            return index\r\n        }\r\n    },\r\n    {\r\n    title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 580, className: \"rowClassName\",\r\n    render: (text, record, index) => {\r\n      return (\r\n        <Tooltip inverse overlay={text}>\r\n          <span tootip={text} style={{\r\n            display: \"inline-block\",\r\n            width: \"80px\",\r\n            textOverflow: \"ellipsis\",\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            verticalAlign: \"middle\",\r\n          }}>{text}</span>\r\n        </Tooltip>\r\n      );\r\n    }\r\n  },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 80},\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 }\r\n];\r\n\r\nconst data = [ ...new Array(1000) ].map((e, i) => {\r\n    const rs = { a: i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key: i };\r\n    if(i%3==0){\r\n        rs.b = '女';\r\n        rs.children = [];\r\n        for(let subi=0;subi<3;subi++){\r\n          rs.children.push({a: i +subi + 'asub', b: i +subi + 'bsub', c: i + subi +'csub', d: i + subi +'dsub', key: i+ `${subi} sub`});\r\n        }\r\n    }else{\r\n      rs.children = [];\r\n        for(let subi=0;subi<3;subi++){\r\n          rs.children.push({a: i +subi + 'asub', b: i +subi + 'bsub', c: i + subi +'csub', d: i + subi +'dsub', key: i+ `${subi} sub`});\r\n        }\r\n    }\r\n    return rs;\r\n   })\r\n\r\n\r\nclass Demo34 extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data,\r\n      selectedRowIndex: 0\r\n    }\r\n  }\r\n  onExpandedRowsChange = (params)=>{\r\n    console.log(params);\r\n  }\r\n  onExpand = (expandKeys)=>{\r\n    console.log('expand---'+expandKeys);\r\n  }\r\n  render() {\r\n    return (\r\n        <BigDataTable\r\n          columns={columns}\r\n          data={data}\r\n          parentNodeId='parent'\r\n          scroll={{y:300}}\r\n          onExpand={this.onExpand}\r\n          onRowClick={(record, index, indent) => {\r\n            console.log('currentIndex--'+index);\r\n          }}\r\n        />\r\n\r\n     \r\n    );\r\n  }\r\n}\r\n\r\n","desc":""},{"example":<Demo161 />,"title":" 表格+分页","code":"/**\r\n * @title 表格+分页\r\n * @parent 分页 Pagination\r\n * @description 点击分页联动表格\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Pagination} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\n\r\nconst columns8 = [\r\n  { title: \"姓名\", dataIndex: \"a\", key: \"a\", width: 100 },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 100 },\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\"\r\n  }\r\n];\r\n\r\nconst pageData = {\r\n  1: [\r\n    { a: \"杨过\", b: \"男\", c: 30, d: \"内行\", key: \"2\" },\r\n    { a: \"令狐冲\", b: \"男\", c: 41, d: \"大侠\", key: \"1\" },\r\n    { a: \"郭靖\", b: \"男\", c: 25, d: \"大侠\", key: \"3\" }\r\n  ],\r\n  2: [\r\n    { a: \"芙蓉姐姐\", b: \"女\", c: 23, d: \"大侠\", key: \"1\" },\r\n    { a: \"芙蓉妹妹\", b: \"女\", c: 23, d: \"内行\", key: \"2\" }\r\n  ]\r\n};\r\n\r\nclass Demo8 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: pageData[1],\r\n      activePage: 1\r\n    };\r\n  }\r\n\r\n  handleSelect(eventKey) {\r\n    this.setState({\r\n      data: pageData[eventKey],\r\n      activePage: eventKey\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"demo8\">\r\n        <Table columns={columns8} data={this.state.data} />\r\n        <Pagination\r\n          first\r\n          last\r\n          prev\r\n          next\r\n          maxButtons={5}\r\n          boundaryLinks\r\n          activePage={this.state.activePage}\r\n          onSelect={this.handleSelect.bind(this)}\r\n          onDataNumSelect={this.dataNumSelect}\r\n          showJump={true}\r\n          total={100}\r\n          dataNum={2}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","desc":" 点击分页联动表格","scss_code":".demo8{\r\n    .u-table {\r\n        margin-bottom: 11px;\r\n    }\r\n    .u-pagination{\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n}"},{"example":<Demo162 />,"title":" 表格+搜索","code":"/**\r\n *\r\n * @title 表格+搜索\r\n * @parent 搜索 search\r\n * @description 搜索刷新表格数据\r\n *\r\n */\r\n\r\nimport React, { Component } from \"react\";\r\nimport {Icon,FormControl,InputGroup} from \"tinper-bee\";\r\n\r\nimport { Table } from 'tinper-bee';\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchValue: \"\",\r\n    empty: false\r\n  };\r\n\r\n  /**\r\n     * 搜索\r\n     */\r\n  handleSearch = () => {\r\n    let { onSearch } = this.props;\r\n    this.setState({\r\n      empty: true\r\n    });\r\n    onSearch && onSearch(this.state.searchValue);\r\n  };\r\n\r\n  /**\r\n     * 捕获回车\r\n     * @param e\r\n     */\r\n  handleKeyDown = e => {\r\n    if (e.keyCode === 13) {\r\n      this.handleSearch();\r\n    }\r\n  };\r\n\r\n  /**\r\n     * 输入框改变\r\n     * @param e\r\n     */\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      searchValue: e\r\n    });\r\n  };\r\n\r\n  /**\r\n     * 清空输入框\r\n     */\r\n  emptySearch = () => {\r\n    let { onEmpty } = this.props;\r\n    this.setState({\r\n      searchValue: \"\",\r\n      empty: false\r\n    });\r\n    onEmpty && onEmpty();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InputGroup simple className=\"search-component\">\r\n        <FormControl\r\n          onChange={this.handleChange}\r\n          value={this.state.searchValue}\r\n          onKeyDown={this.handleKeyDown}\r\n          placeholder=\"请输入用户名\"\r\n          type=\"text\"\r\n        />\r\n        {this.state.empty ? (\r\n          <Icon\r\n            type=\"uf-close-c\"\r\n            onClick={this.emptySearch}\r\n            className=\"empty-search\"\r\n          />\r\n        ) : null}\r\n\r\n        <InputGroup.Button onClick={this.handleSearch} shape=\"border\">\r\n          <Icon type=\"uf-search\" />\r\n        </InputGroup.Button>\r\n      </InputGroup>\r\n    );\r\n  }\r\n}\r\n\r\nconst columns9 = [\r\n  {\r\n    title: \"姓名\",\r\n    dataIndex: \"a\",\r\n    key: \"a\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"性别\",\r\n    dataIndex: \"b\",\r\n    key: \"b\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"年龄\",\r\n    dataIndex: \"c\",\r\n    key: \"c\",\r\n    width: 200\r\n  },\r\n  {\r\n    title: \"武功级别\",\r\n    dataIndex: \"d\",\r\n    key: \"d\"\r\n  }\r\n];\r\n\r\nconst userData = [\r\n  { a: \"杨过\", b: \"男\", c: 30, d: \"内行\", key: \"2\" },\r\n  { a: \"令狐冲\", b: \"男\", c: 41, d: \"大侠\", key: \"1\" },\r\n  { a: \"郭靖\", b: \"男\", c: 25, d: \"大侠\", key: \"3\" }\r\n];\r\n\r\nclass Demo9 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: userData\r\n    };\r\n  }\r\n\r\n  handleSearch = value => {\r\n    if (value === \"\") {\r\n      return this.setState({\r\n        data: userData\r\n      });\r\n    }\r\n    let regExp = new RegExp(value, \"ig\");\r\n    let data = userData.filter(item => regExp.test(item.a));\r\n    this.setState({\r\n      data\r\n    });\r\n  };\r\n\r\n  handleEmpty = () => {\r\n    this.setState({\r\n      data: userData\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"clearfix\">\r\n          <Search onSearch={this.handleSearch} onEmpty={this.handleEmpty} />\r\n        </div>\r\n        <Table columns={columns9} data={this.state.data} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 搜索刷新表格数据"},{"example":<Demo501 />,"title":" 单元格编辑","code":"/**\r\n *\r\n * @title 单元格编辑\r\n * @description 可以对单元格进行编辑的表格，示例中给出输入框+必填校验、下拉框编辑模式，以及输入模式的必填校验。\r\n *\r\n */\r\nimport React, { Component } from \"react\";\nimport {  } from 'tinper-bee';\r\nimport { Table } from \"tinper-bee\";\r\nimport { Icon, Select, Tooltip } from \"tinper-bee\";\r\nconst Option = Select.Option;\r\n\r\nclass StringEditCell extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value,\r\n      editable: false\r\n    };\r\n  }\r\n\r\n  commitChange = () => {\r\n    if (this.state.value === \"\") return;\r\n    this.setState({ editable: false });\r\n    if (this.props.onChange) {\r\n      this.props.onChange(this.state.value);\r\n    }\r\n  };\r\n\r\n  edit = () => {\r\n    this.setState({ editable: true });\r\n  };\r\n\r\n  handleKeydown = event => {\r\n    if (event.keyCode == 13) {\r\n      this.commitChange();\r\n    }\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { value, editable } = this.state;\r\n    return (\r\n      <div className=\"editable-cell\">\r\n        {editable ? (\r\n          <div className=\"editable-cell-input-wrapper\">\r\n            <input\r\n              className=\"u-form-control\"\r\n              autoFocus\r\n              defaultValue={this.props.value}\r\n              value={value}\r\n              onKeyDown={this.handleKeydown}\r\n              onChange={this.handleChange}\r\n              onBlur={this.commitChange}\r\n            />\r\n            {value === \"\" ? (\r\n              <Tooltip\r\n                inverse\r\n                placement=\"bottom\"\r\n                overlay={\r\n                  <div className=\"help-tip\">\r\n                    {\"请输入\" + this.props.colName}\r\n                  </div>\r\n                }\r\n              >\r\n                <Icon className=\"uf-exc-t require\" />\r\n              </Tooltip>\r\n            ) : null}\r\n          </div>\r\n        ) : (\r\n          <div className=\"editable-cell-text-wrapper\" onClick={this.edit}>\r\n            {value || \" \"}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst SELECT_SOURCE = [\"普通\", \"精良\", \"稀有\", \"传奇\", \"远古传奇\", \"太古传奇\"];\r\n\r\nclass SelectEditCell extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value,\r\n      editable: false\r\n    };\r\n  }\r\n\r\n  handleSelect = (value) => {\r\n    this.setState({ value });\r\n  }\r\n\r\n  commitChange = () => {\r\n    this.setState({ editable: false });\r\n    if (this.props.onChange) {\r\n      this.props.onChange(this.state.value);\r\n    }\r\n  };\r\n\r\n  edit = () => {\r\n    this.setState({ editable: true });\r\n  };\r\n\r\n  render() {\r\n    const { value, editable } = this.state;\r\n    return (\r\n      <div className=\"editable-cell\">\r\n        {editable ? (\r\n          <div className=\"editable-cell-input-wrapper\">\r\n            <Select\r\n              defaultValue={this.props.value}\r\n              value={value}\r\n              onSelect={this.handleSelect}\r\n              onBlur={this.commitChange}\r\n              autoFocus\r\n            >\r\n              {SELECT_SOURCE.map((item, index) => (\r\n                <Option key={index} value={item}>\r\n                  {item}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        ) : (\r\n          <div className=\"editable-cell-text-wrapper\" onClick={this.edit}>\r\n            {value || \" \"}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst dataSource = [\r\n  { name: \"全能法戒\", quality: \"远古传奇\", level: 70.11 },\r\n  { name: \"绝命\", quality: \"太古传奇\", level: 70 },\r\n  { name: \"蚀刻符印\", quality: \"太古传奇\", level: 70 },\r\n  { name: \"虹光\", quality: \"传奇\", level: 70 },\r\n  { name: \"复仇者护腕\", quality: \"传奇\", level: 70 }\r\n];\r\n\r\nclass Demo501 extends Component {\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: \"装备名称\",\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        render: (text, record, index) => (\r\n          <StringEditCell\r\n            value={text}\r\n            colName={\"装备名称\"}\r\n            onChange={this.onCellChange(index, \"name\")}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: \"品质\",\r\n        dataIndex: \"quality\",\r\n        key: \"quality\",\r\n        render: (text, record, index) => (\r\n          <SelectEditCell\r\n            value={text}\r\n            onChange={this.onCellChange(index, \"quality\")}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: \"需求等级\",\r\n        dataIndex: \"level\",\r\n        key: \"level\"\r\n      }\r\n    ];\r\n\r\n    this.state = {\r\n      dataSource: dataSource\r\n    };\r\n  }\r\n\r\n  onCellChange = (index, key) => {\r\n    return value => {\r\n      const { dataSource } = this.state;\r\n      dataSource[index][key] = value;\r\n      this.setState({ dataSource }, () => console.dir(this.state.dataSource));\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"demo501\">\r\n        <Table data={this.state.dataSource} columns={this.columns} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","desc":" 可以对单元格进行编辑的表格，示例中给出输入框+必填校验、下拉框编辑模式，以及输入模式的必填校验。","scss_code":".demo501 {\r\n  .editable-cell-text-wrapper {\r\n    &:hover {\r\n      border: 1px dashed #A5ADBA;\r\n    }\r\n  }\r\n  .require {\r\n    position: absolute;\r\n    top: 2px;\r\n    color: red;\r\n    font-size: 20px;\r\n  }\r\n}\r\n.help-tip {\r\n  color: #F44336;\r\n}\r\n.tooltip-arrow {\r\n  border-bottom-color: #F44336 !important;\r\n}\r\n.tooltip-inner {\r\n  border-color: #F44336 !important;\r\n}"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={12} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
